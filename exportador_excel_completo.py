#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exportador Excel Completo FIDC - Sistema Energisa
===================================================

Este m√≥dulo gera um arquivo Excel completo com:
- Aba 1: Base de dados processada
- Aba 2: Dicion√°rio detalhado das colunas
- Aba 3: Explica√ß√£o dos c√°lculos e metodologia

Criado em: Agosto 2025
Projeto: Energisa FIDC Calculator
"""

import pandas as pd
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import datetime
import os

class ExportadorExcelCompleto:
    """
    Classe respons√°vel por gerar documenta√ß√£o Excel completa do sistema FIDC
    """
    
    def __init__(self, caminho_dados=None):
        """
        Inicializa o exportador
        
        Args:
            caminho_dados (str): Caminho para arquivo CSV com dados processados
        """
        self.caminho_dados = caminho_dados
        self.wb = None
        self.data_geracao = datetime.now().strftime("%d/%m/%Y %H:%M")
        
        # Definir estilos
        self.estilo_cabecalho = {
            'font': Font(bold=True, color="FFFFFF", size=12),
            'fill': PatternFill(start_color="366092", end_color="366092", fill_type="solid"),
            'alignment': Alignment(horizontal="center", vertical="center"),
            'border': Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
        }
        
        self.estilo_dados = {
            'font': Font(size=10),
            'alignment': Alignment(horizontal="left", vertical="center"),
            'border': Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
        }
        
        self.estilo_titulo = {
            'font': Font(bold=True, size=14, color="1F4E79"),
            'alignment': Alignment(horizontal="center", vertical="center")
        }
    
    def carregar_dados(self):
        """
        Carrega os dados processados do sistema
        
        Returns:
            pandas.DataFrame: Dados processados ou DataFrame vazio se arquivo n√£o existir
        """
        if self.caminho_dados and os.path.exists(self.caminho_dados):
            try:
                # Tentar carregar como CSV primeiro
                if self.caminho_dados.endswith('.csv'):
                    return pd.read_csv(self.caminho_dados, encoding='utf-8')
                elif self.caminho_dados.endswith('.xlsx'):
                    return pd.read_excel(self.caminho_dados)
                else:
                    return pd.read_csv(self.caminho_dados)
            except Exception as e:
                print(f"Erro ao carregar dados: {e}")
                return self._criar_dados_exemplo()
        else:
            return self._criar_dados_exemplo()
    
    def _criar_dados_exemplo(self):
        """
        Cria dados de exemplo para demonstra√ß√£o
        
        Returns:
            pandas.DataFrame: Dados de exemplo
        """
        dados_exemplo = {
            'nome_cliente': ['PAULO ROBERTO FLORES', 'MARIA SILVA SANTOS', 'JO√ÉO PEDRO OLIVEIRA'],
            'documento': [None, 12345678901, 98765432109],
            'contrato': [19.0, 25.0, 33.0],
            'classe': ['Residencial', 'Comercial', 'Industrial'],
            'situacao': ['Desligado', 'Ativo', 'Suspenso'],
            'valor_principal': [115.00, 250.50, 1500.75],
            'valor_nao_cedido': [0.0, 0.0, 50.0],
            'valor_terceiro': [0.0, 15.25, 0.0],
            'valor_cip': [2.37, 5.12, 30.15],
            'data_vencimento': ['2026-02-06', '2025-12-15', '2024-08-20'],
            'empresa': ['ESS', 'EMR', 'ESS'],
            'tipo': ['Privado', 'Privado', 'P√∫blico'],
            'status': ['Incobr√°vel', 'Cobr√°vel', 'Em an√°lise'],
            'dias_atraso': [0, 45, 358],
            'aging': ['A vencer', 'De 31 a 59 dias', 'De 120 a 359 dias'],
            'valor_liquido': [95.32, 230.13, 1420.60],
            'multa': [1.91, 4.60, 28.41],
            'juros_moratorios': [0.0, 3.45, 169.27],
            'correcao_monetaria': [0.0, 12.05, 362.56],
            'valor_corrigido': [97.23, 250.23, 1980.84],
            'taxa_recuperacao': [0.0089, 0.39, 0.47],
            'valor_recuperavel': [0.87, 97.59, 931.00],
            'valor_justo': [0.87, 94.21, 878.45]
        }
        return pd.DataFrame(dados_exemplo)
    
    def criar_aba_dados(self, df):
        """
        Cria aba com base de dados
        
        Args:
            df (pandas.DataFrame): Dados para inserir na aba
        """
        ws = self.wb.create_sheet("1. Base de Dados")
        
        # T√≠tulo
        ws['A1'] = f"üìä BASE DE DADOS FIDC - ENERGISA"
        ws['A1'].font = Font(bold=True, size=16, color="1F4E79")
        ws.merge_cells('A1:X1')
        
        # Informa√ß√µes gerais
        ws['A3'] = f"üìÖ Data de Gera√ß√£o: {self.data_geracao}"
        ws['A4'] = f"üìã Total de Registros: {len(df):,}"
        ws['A5'] = f"üìÅ Origem: Sistema FIDC Calculator"
        
        # Inserir dados
        linha_inicio = 7
        
        # Cabe√ßalhos
        for col_idx, coluna in enumerate(df.columns, 1):
            cell = ws.cell(row=linha_inicio, column=col_idx, value=coluna)
            cell.font = self.estilo_cabecalho['font']
            cell.fill = self.estilo_cabecalho['fill']
            cell.alignment = self.estilo_cabecalho['alignment']
            cell.border = self.estilo_cabecalho['border']
        
        # Dados
        for row_idx, row in enumerate(dataframe_to_rows(df, index=False, header=False), linha_inicio + 1):
            for col_idx, value in enumerate(row, 1):
                cell = ws.cell(row=row_idx, column=col_idx, value=value)
                cell.border = self.estilo_dados['border']
                cell.alignment = self.estilo_dados['alignment']
                cell.font = self.estilo_dados['font']
        
        # Ajustar largura das colunas
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 20)
            ws.column_dimensions[column_letter].width = adjusted_width
    
    def criar_aba_dicionario(self):
        """
        Cria aba com dicion√°rio de dados detalhado
        """
        ws = self.wb.create_sheet("2. Dicion√°rio de Dados")
        
        # T√≠tulo
        ws['A1'] = "üìö DICION√ÅRIO DE DADOS - DataFrame Final"
        ws['A1'].font = Font(bold=True, size=16, color="1F4E79")
        ws.merge_cells('A1:E1')
        
        # Cabe√ßalhos
        headers = ['#', 'Nome da Coluna', 'Tipo de Dado', 'Descri√ß√£o', 'Observa√ß√µes']
        for col_idx, header in enumerate(headers, 1):
            cell = ws.cell(row=3, column=col_idx, value=header)
            cell.font = self.estilo_cabecalho['font']
            cell.fill = self.estilo_cabecalho['fill']
            cell.alignment = self.estilo_cabecalho['alignment']
            cell.border = self.estilo_cabecalho['border']
        
        # Definir dicion√°rio de dados
        dicionario_dados = [
            # GRUPO 1: Dados B√°sicos do Cliente
            (1, "nome_cliente", "Texto", "Nome do cliente titular da conta", "Campo obrigat√≥rio para identifica√ß√£o"),
            (2, "documento", "Num√©rico", "CPF/CNPJ do cliente", "Frequentemente vazio nos dados"),
            (3, "contrato", "Num√©rico", "N√∫mero do contrato de energia", "Identificador √∫nico do contrato"),
            (4, "classe", "Texto", "Classifica√ß√£o do cliente", "Residencial, Comercial, Industrial, Rural"),
            (5, "situacao", "Texto", "Status atual do cliente", "Ativo, Desligado, Suspenso"),
            (6, "valor_principal", "Num√©rico", "Valor original da d√≠vida", "Valor base antes de dedu√ß√µes"),
            (7, "valor_nao_cedido", "Num√©rico", "Parcela n√£o cedida ao FIDC", "Valor retido pela distribuidora"),
            (8, "valor_terceiro", "Num√©rico", "Valores de terceiros", "Tributos, taxas de terceiros"),
            (9, "valor_cip", "Num√©rico", "Valor CIP", "Contribui√ß√£o de Ilumina√ß√£o P√∫blica"),
            
            # GRUPO 2: Metadados e Controle
            (10, "data_vencimento", "Data", "Data original de vencimento", "Formato timestamp original"),
            (11, "empresa", "Texto", "C√≥digo da distribuidora", "ESS, EMR, etc."),
            (12, "tipo", "Texto", "Classifica√ß√£o do neg√≥cio", "Privado, P√∫blico, Hospital"),
            (13, "status", "Texto", "Status da cobran√ßa", "Cobr√°vel, Incobr√°vel, Em an√°lise"),
            (14, "id_padronizado", "Texto", "Identificador √∫nico gerado", "Chave prim√°ria para rastreamento"),
            (15, "base_origem", "Texto", "Arquivo de origem dos dados", "Rastreabilidade da fonte"),
            (16, "data_base", "Data", "Data de refer√™ncia para c√°lculos", "Data fixa para todos os c√°lculos"),
            
            # GRUPO 3: Aging e Temporalidade
            (17, "data_vencimento_limpa", "Data", "Data de vencimento padronizada", "Formato YYYY-MM-DD limpo"),
            (18, "dias_atraso", "Inteiro", "Dias entre vencimento e data base", "C√°lculo: data_base - data_vencimento"),
            (19, "aging", "Texto", "Classifica√ß√£o de aging", "9 faixas: A vencer at√© >1080 dias"),
            
            # GRUPO 4: Valores Limpos e L√≠quidos
            (20, "valor_principal_limpo", "Num√©rico", "Valor principal sem formata√ß√£o", "Num√©rico puro"),
            (21, "valor_nao_cedido_limpo", "Num√©rico", "Valor n√£o cedido limpo", "Num√©rico puro"),
            (22, "valor_terceiro_limpo", "Num√©rico", "Valor terceiros limpo", "Num√©rico puro"),
            (23, "valor_cip_limpo", "Num√©rico", "Valor CIP limpo", "Num√©rico puro"),
            (24, "valor_liquido", "Num√©rico", "Valor l√≠quido final", "F√≥rmula: principal - nao_cedido - terceiro - cip"),
            
            # GRUPO 5: Corre√ß√£o Monet√°ria
            (25, "multa", "Num√©rico", "Multa calculada", "F√≥rmula: valor_liquido √ó 2%"),
            (26, "meses_atraso", "Num√©rico", "Meses de atraso calculados", "dias_atraso √∑ 30"),
            (27, "juros_moratorios", "Num√©rico", "Juros morat√≥rios", "F√≥rmula: valor_liquido √ó 1% √ó meses"),
            (28, "indice_vencimento", "Num√©rico", "√çndice IGP-M no vencimento", "Obtido da tabela hist√≥rica"),
            (29, "indice_base", "Num√©rico", "√çndice IGP-M na data base", "√çndice de refer√™ncia (data_base)"),
            (30, "fator_correcao", "Num√©rico", "Fator de corre√ß√£o monet√°ria", "F√≥rmula: indice_base √∑ indice_vencimento"),
            (31, "correcao_monetaria", "Num√©rico", "Corre√ß√£o monet√°ria aplicada", "F√≥rmula: valor_liquido √ó (fator_correcao - 1)"),
            (32, "valor_corrigido", "Num√©rico", "Valor final corrigido", "F√≥rmula: valor_liquido + multa + juros + corre√ß√£o"),
            
            # GRUPO 6: Taxa de Recupera√ß√£o e Valor Justo
            (33, "aging_taxa", "Texto", "Aging mapeado para taxa", "Mapeamento: >1080 dias ‚Üí Demais anos"),
            (34, "taxa_recuperacao", "Num√©rico", "Taxa de recupera√ß√£o esperada", "Taxa decimal baseada em hist√≥rico"),
            (35, "prazo_recebimento", "Num√©rico", "Prazo esperado de recebimento", "Meses at√© recebimento esperado"),
            (36, "valor_recuperavel", "Num√©rico", "Valor esperado de recupera√ß√£o", "F√≥rmula: valor_corrigido √ó taxa_recuperacao"),
            (37, "ipca_12m_real", "Num√©rico", "IPCA 12 meses", "Taxa IPCA anual em decimal"),
            (38, "ipca_mensal", "Num√©rico", "IPCA mensal equivalente", "Taxa IPCA mensal derivada"),
            (39, "mes_recebimento", "Inteiro", "M√™s esperado de recebimento", "Baseado no prazo_recebimento"),
            (40, "fator_exponencial", "Num√©rico", "Fator exponencial IPCA", "F√≥rmula: (1 + ipca_12m)^(prazo/12)"),
            (41, "multa_para_justo", "Num√©rico", "Multa ajustada para valor justo", "Multa proporcional aplicada"),
            (42, "valor_justo", "Num√©rico", "Valor justo final", "F√≥rmula: valor_corrigido √ó fator_exponencial √ó taxa_recuperacao")
        ]
        
        # Inserir dados do dicion√°rio
        for row_idx, (num, coluna, tipo, descricao, obs) in enumerate(dicionario_dados, 4):
            # Aplicar cores alternadas
            fill_color = "F2F2F2" if row_idx % 2 == 0 else "FFFFFF"
            
            cells = [
                ws.cell(row=row_idx, column=1, value=num),
                ws.cell(row=row_idx, column=2, value=coluna),
                ws.cell(row=row_idx, column=3, value=tipo),
                ws.cell(row=row_idx, column=4, value=descricao),
                ws.cell(row=row_idx, column=5, value=obs)
            ]
            
            for cell in cells:
                cell.border = self.estilo_dados['border']
                cell.alignment = self.estilo_dados['alignment']
                cell.font = self.estilo_dados['font']
                cell.fill = PatternFill(start_color=fill_color, end_color=fill_color, fill_type="solid")
        
        # Ajustar largura das colunas
        ws.column_dimensions['A'].width = 5
        ws.column_dimensions['B'].width = 25
        ws.column_dimensions['C'].width = 12
        ws.column_dimensions['D'].width = 40
        ws.column_dimensions['E'].width = 35
    
    def criar_aba_calculos(self):
        """
        Cria aba com explica√ß√£o detalhada dos c√°lculos
        """
        ws = self.wb.create_sheet("3. C√°lculos e Metodologia")
        
        # T√≠tulo
        ws['A1'] = "üßÆ METODOLOGIA DE C√ÅLCULOS FIDC - ENERGISA"
        ws['A1'].font = Font(bold=True, size=16, color="1F4E79")
        ws.merge_cells('A1:F1')
        
        linha_atual = 3
        
        # Se√ß√£o 1: Vis√£o Geral
        secoes = [
            {
                'titulo': '1. VIS√ÉO GERAL DO SISTEMA',
                'conteudo': [
                    'O sistema FIDC Calculator implementa metodologia rigorosa para c√°lculo de valor justo',
                    'de carteiras de receb√≠veis de distribuidoras de energia el√©trica brasileiras.',
                    '',
                    'COMPONENTES PRINCIPAIS:',
                    '‚Ä¢ Aging (classifica√ß√£o temporal da inadimpl√™ncia)',
                    '‚Ä¢ Corre√ß√£o monet√°ria (IGP-M at√© mai/2021, IPCA ap√≥s jun/2021)',
                    '‚Ä¢ Juros morat√≥rios (1% ao m√™s, proporcional)',
                    '‚Ä¢ Multa contratual (2% sobre valor l√≠quido)',
                    '‚Ä¢ Taxa de recupera√ß√£o (baseada em hist√≥rico setorial)',
                    '‚Ä¢ Valor presente (desconto pelo prazo de recebimento)'
                ]
            },
            {
                'titulo': '2. C√ÅLCULO DE AGING',
                'conteudo': [
                    'OBJETIVO: Classificar cada d√≠vida pelo tempo de inadimpl√™ncia',
                    '',
                    'F√ìRMULA: Dias de Atraso = Data Base - Data de Vencimento',
                    '',
                    'CLASSIFICA√á√ïES:',
                    '‚Ä¢ A vencer: DA ‚â§ 0 (ainda n√£o vencido)',
                    '‚Ä¢ Menor que 30 dias: 0 < DA ‚â§ 30',
                    '‚Ä¢ De 31 a 59 dias: 30 < DA ‚â§ 59',
                    '‚Ä¢ De 60 a 89 dias: 59 < DA ‚â§ 89',
                    '‚Ä¢ De 90 a 119 dias: 89 < DA ‚â§ 119',
                    '‚Ä¢ De 120 a 359 dias: 119 < DA ‚â§ 359 (CONCENTRA√á√ÉO DE VALOR)',
                    '‚Ä¢ De 360 a 719 dias: 359 < DA ‚â§ 719',
                    '‚Ä¢ De 720 a 1080 dias: 719 < DA ‚â§ 1080',
                    '‚Ä¢ Maior que 1080 dias: DA > 1080'
                ]
            },
            {
                'titulo': '3. CORRE√á√ÉO MONET√ÅRIA',
                'conteudo': [
                    'OBJETIVO: Recompor poder de compra considerando infla√ß√£o oficial',
                    '',
                    'METODOLOGIA H√çBRIDA:',
                    '‚Ä¢ IGP-M: para datas ‚â§ maio/2021',
                    '‚Ä¢ IPCA: para datas > maio/2021',
                    '',
                    'F√ìRMULA: CM = Valor L√≠quido √ó (√çndice Base √∑ √çndice Vencimento - 1)',
                    '',
                    '√çNDICES UTILIZADOS:',
                    '‚Ä¢ IGP-M: Funda√ß√£o Get√∫lio Vargas',
                    '‚Ä¢ IPCA: Instituto Brasileiro de Geografia e Estat√≠stica',
                    '',
                    'APLICA√á√ÉO: Apenas para valores em atraso (DA > 0)'
                ]
            },
            {
                'titulo': '4. JUROS E MULTAS',
                'conteudo': [
                    'MULTA CONTRATUAL:',
                    '‚Ä¢ Taxa: 2% sobre valor l√≠quido',
                    '‚Ä¢ Aplica√ß√£o: Uma √∫nica vez para valores em atraso',
                    '‚Ä¢ F√≥rmula: M = VL √ó 0,02 √ó I(DA > 0)',
                    '',
                    'JUROS MORAT√ìRIOS:',
                    '‚Ä¢ Taxa: 1% ao m√™s',
                    '‚Ä¢ C√°lculo proporcional por dias',
                    '‚Ä¢ F√≥rmula: J = VL √ó 0,01 √ó (DA √∑ 30) √ó I(DA > 0)',
                    '',
                    'VALOR CORRIGIDO TOTAL:',
                    'VC = Valor L√≠quido + Multa + Juros + Corre√ß√£o Monet√°ria'
                ]
            },
            {
                'titulo': '5. TAXAS DE RECUPERA√á√ÉO',
                'conteudo': [
                    'OBJETIVO: Estimar probabilidade de recupera√ß√£o efetiva por aging',
                    '',
                    'TAXAS POR CATEGORIA:',
                    '‚Ä¢ A vencer: 0,89%',
                    '‚Ä¢ Menor que 30 dias: 47,00%',
                    '‚Ä¢ De 31 a 59 dias: 39,00%',
                    '‚Ä¢ De 60 a 89 dias: 52,00%',
                    '‚Ä¢ De 90 a 119 dias: 57,00%',
                    '‚Ä¢ De 120 a 359 dias: 47,00% (MAIOR CONCENTRA√á√ÉO)',
                    '‚Ä¢ De 360 a 719 dias: 2,00%',
                    '‚Ä¢ De 720 a 1080 dias: 1,00%',
                    '‚Ä¢ Maior que 1080 dias: 0,70%',
                    '',
                    'FONTE: Dados hist√≥ricos do setor el√©trico brasileiro',
                    'VARIA√á√ÉO: Por empresa, tipo de cliente e regi√£o'
                ]
            },
            {
                'titulo': '6. VALOR JUSTO (VALOR PRESENTE)',
                'conteudo': [
                    'OBJETIVO: Determinar valor presente considerando prazo e custo de capital',
                    '',
                    'F√ìRMULA: VJ = Valor Recuper√°vel √∑ (1 + Taxa Desconto)^(Prazo/365)',
                    '',
                    'COMPONENTES:',
                    '‚Ä¢ Valor Recuper√°vel: VC √ó Taxa de Recupera√ß√£o',
                    '‚Ä¢ Taxa de Desconto: 8% a 15% ao ano (t√≠pico FIDC el√©trico)',
                    '‚Ä¢ Prazo: Tempo esperado para recupera√ß√£o (6 a 42 meses)',
                    '',
                    'PRAZOS POR AGING:',
                    '‚Ä¢ Primeiro ano: 6 meses',
                    '‚Ä¢ Segundo ano: 18 meses',
                    '‚Ä¢ Terceiro ano: 36 meses',
                    '‚Ä¢ Demais anos: 42 meses',
                    '',
                    'RESULTADO: Valor que o FIDC pode pagar pela carteira'
                ]
            },
            {
                'titulo': '7. ENCADEAMENTO DOS C√ÅLCULOS',
                'conteudo': [
                    'SEQU√äNCIA L√ìGICA COMPLETA:',
                    '',
                    '1. VALOR L√çQUIDO = Principal - N√£o Cedido - Terceiros - CIP',
                    '2. AGING = Classifica√ß√£o por dias de atraso',
                    '3. MULTA = VL √ó 2% (se em atraso)',
                    '4. JUROS = VL √ó 1% √ó (dias √∑ 30) (se em atraso)',
                    '5. CORRE√á√ÉO = VL √ó (√çndice Base √∑ √çndice Vencimento - 1)',
                    '6. VALOR CORRIGIDO = VL + Multa + Juros + Corre√ß√£o',
                    '7. VALOR RECUPER√ÅVEL = VC √ó Taxa de Recupera√ß√£o(aging)',
                    '8. VALOR JUSTO = VR √∑ (1 + Taxa)^(Prazo/365)',
                    '',
                    'RESULTADO FINAL: Valor que maximiza retorno considerando risco'
                ]
            },
            {
                'titulo': '8. FATORES DE INFLU√äNCIA',
                'conteudo': [
                    'COMPOSI√á√ÉO DA CARTEIRA:',
                    '‚Ä¢ Concentra√ß√£o em aging 120-359 dias maximiza valor',
                    '‚Ä¢ Carteiras antigas (>3 anos) reduzem valor significativamente',
                    '‚Ä¢ Mix equilibrado otimiza rela√ß√£o risco-retorno',
                    '',
                    'CONDI√á√ïES MACROECON√îMICAS:',
                    '‚Ä¢ Taxa Selic elevada reduz valor presente',
                    '‚Ä¢ Infla√ß√£o alta aumenta valor corrigido',
                    '‚Ä¢ Estabilidade econ√¥mica melhora taxas de recupera√ß√£o',
                    '',
                    'CARACTER√çSTICAS SETORIAIS:',
                    '‚Ä¢ Essencialidade do servi√ßo favorece recupera√ß√£o',
                    '‚Ä¢ Regulamenta√ß√£o espec√≠fica influencia prazos',
                    '‚Ä¢ Sazonalidade de consumo afeta padr√µes de pagamento'
                ]
            },
            {
                'titulo': '9. RESULTADOS ESPERADOS',
                'conteudo': [
                    'FAIXAS T√çPICAS DE VALOR JUSTO:',
                    '',
                    'POR AGING:',
                    '‚Ä¢ Primeiro ano (at√© 359 dias): 25% a 50% do valor corrigido',
                    '‚Ä¢ Segundo ano (360-719 dias): 1% a 3% do valor corrigido',
                    '‚Ä¢ Terceiro ano (720-1080 dias): 0,5% a 1,5% do valor corrigido',
                    '‚Ä¢ Acima de 3 anos: 0,3% a 0,8% do valor corrigido',
                    '',
                    'CONSOLIDADO GERAL:',
                    '‚Ä¢ Carteiras balanceadas: 3% a 5% do valor corrigido',
                    '‚Ä¢ Carteiras antigas: 1% a 2% do valor corrigido',
                    '‚Ä¢ Carteiras recentes: 5% a 8% do valor corrigido',
                    '',
                    'EXEMPLO PR√ÅTICO:',
                    'Carteira R$ 1 bilh√£o ‚Üí Valor FIDC: R$ 23-45 milh√µes'
                ]
            }
        ]
        
        # Inserir se√ß√µes
        for secao in secoes:
            # T√≠tulo da se√ß√£o
            ws.cell(row=linha_atual, column=1, value=secao['titulo']).font = Font(bold=True, size=12, color="1F4E79")
            linha_atual += 2
            
            # Conte√∫do da se√ß√£o
            for linha_conteudo in secao['conteudo']:
                ws.cell(row=linha_atual, column=1, value=linha_conteudo).font = Font(size=10)
                linha_atual += 1
            
            linha_atual += 2  # Espa√ßo entre se√ß√µes
        
        # Ajustar largura da coluna
        ws.column_dimensions['A'].width = 100
    
    def gerar_excel(self, nome_arquivo="FIDC_Documentacao_Completa.xlsx"):
        """
        Gera arquivo Excel completo com todas as abas
        
        Args:
            nome_arquivo (str): Nome do arquivo a ser gerado
        
        Returns:
            str: Caminho do arquivo gerado
        """
        # Criar workbook
        self.wb = openpyxl.Workbook()
        
        # Remover aba padr√£o
        default_sheet = self.wb.active
        self.wb.remove(default_sheet)
        
        # Carregar dados
        df = self.carregar_dados()
        
        # Criar abas
        self.criar_aba_dados(df)
        self.criar_aba_dicionario()
        self.criar_aba_calculos()
        
        # Salvar arquivo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_final = f"FIDC_Documentacao_Completa_{timestamp}.xlsx"
        caminho_completo = os.path.join(os.getcwd(), nome_final)
        
        self.wb.save(caminho_completo)
        print(f"‚úÖ Arquivo Excel gerado com sucesso: {nome_final}")
        print(f"üìÅ Localiza√ß√£o: {caminho_completo}")
        
        return caminho_completo

def main():
    """
    Fun√ß√£o principal para execu√ß√£o do exportador
    """
    print("üîã ENERGISA FIDC Calculator - Exportador Excel Completo")
    print("=" * 60)
    
    # Verificar se existe arquivo de dados
    possveis_arquivos = [
        "data/FIDC_Dados_Finais_20250813_180751.csv",
        "FIDC_Dados_Brutos_20250806_105650.csv",
        "FIDC_ESS.xlsx"
    ]
    
    arquivo_dados = None
    for arquivo in possveis_arquivos:
        if os.path.exists(arquivo):
            arquivo_dados = arquivo
            break
    
    # Criar exportador
    exportador = ExportadorExcelCompleto(arquivo_dados)
    
    # Gerar documenta√ß√£o
    arquivo_gerado = exportador.gerar_excel()
    
    print("\nüìä CONTE√öDO GERADO:")
    print("‚Ä¢ Aba 1: Base de dados completa")
    print("‚Ä¢ Aba 2: Dicion√°rio detalhado das 42 colunas")
    print("‚Ä¢ Aba 3: Metodologia de c√°lculos e explica√ß√µes")
    print("\nüéØ Arquivo pronto para apresenta√ß√£o e documenta√ß√£o!")

if __name__ == "__main__":
    main()
