"""
P√°gina de Corre√ß√£o - FIDC Calculator
C√°lculo de aging, corre√ß√£o monet√°ria e valor justo
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import os
from utils.calculador_aging import CalculadorAging
from utils.calculador_correcao import CalculadorCorrecao

# Importar classe de valor justo do app original
import requests
from dateutil.relativedelta import relativedelta
import numpy as np

class CalculadorIndicesEconomicos:
    """
    Classe para c√°lculo de √≠ndices econ√¥micos a partir de arquivo Excel
    """
    
    def __init__(self):
        self.df_indices = None
        self.ipca_12m_real = None
        self.data_base = None
    
    def carregar_indices_do_excel(self, arquivo_excel):
        """
        Carrega dados de IGP-M/IPCA do arquivo Excel
        Estrutura esperada: Coluna C (Ano), Coluna D (M√™s) e Coluna F (√çndice IGP-M)
        """
        try:
            import pandas as pd
            import streamlit as st
            import numpy as np
            from datetime import datetime
            
            print("üîÑ Carregando √≠ndices do arquivo Excel...")
            
            # Ler o arquivo Excel completo primeiro para analisar
            try:
                df_completo = pd.read_excel(arquivo_excel)
                print(f"üìä Arquivo carregado com {df_completo.shape[0]} linhas e {df_completo.shape[1]} colunas")
                
                # Verificar se tem pelo menos 6 colunas (A at√© F)
                if df_completo.shape[1] < 6:
                    raise ValueError(f"Arquivo tem apenas {df_completo.shape[1]} colunas, mas precisa de pelo menos 6 (A-F)")
                
                # Extrair colunas C (2), D (3) e F (5) - Ano, M√™s e √çndice IGP-M
                df = df_completo.iloc[:, [2, 3, 5]].copy()
                
            except Exception as e:
                print(f"‚ùå Erro ao ler arquivo Excel: {e}")
                raise e
            
            # Renomear colunas para padroniza√ß√£o
            df.columns = ['ano', 'mes', 'indice']
            print(f"üìä Dados extra√≠dos - Coluna C (ano), Coluna D (m√™s) e Coluna F (√≠ndice)")
            
            # Limpar dados nulos
            df_original_len = len(df)
            df = df.dropna()
            print(f"üìä Removidas {df_original_len - len(df)} linhas com valores nulos")
            
            # Processar colunas de ano e m√™s
            print("üîÑ Processando colunas de ano e m√™s...")
            
            # Converter ano e m√™s para inteiros
            try:
                print(f"üìä Antes da convers√£o - Tipo ano: {df['ano'].dtype}, Tipo m√™s: {df['mes'].dtype}")
                print(f"üìä Exemplos ano: {df['ano'].head(3).tolist()}")
                print(f"üìä Exemplos m√™s: {df['mes'].head(3).tolist()}")
                
                df['ano'] = pd.to_numeric(df['ano'], errors='coerce').astype('Int64')
                df['mes'] = pd.to_numeric(df['mes'], errors='coerce').astype('Int64')
                
                print(f"üìä Ap√≥s convers√£o - Valores √∫nicos ano: {sorted(df['ano'].dropna().unique())[:10]}")
                print(f"üìä Ap√≥s convers√£o - Valores √∫nicos m√™s: {sorted(df['mes'].dropna().unique())}")
                
            except Exception as conv_error:
                print(f"‚ö†Ô∏è Erro ao converter ano/m√™s para n√∫meros: {conv_error}")
                # Tentar convers√£o manual
                try:
                    df['ano'] = df['ano'].astype(str).str.extract(r'(\d{4})')[0].astype(float).astype('Int64')
                    df['mes'] = df['mes'].astype(str).str.extract(r'(\d{1,2})')[0].astype(float).astype('Int64')
                    print("‚úÖ Convers√£o manual bem-sucedida")
                except:
                    raise ValueError("N√£o foi poss√≠vel converter ano (coluna C) e m√™s (coluna D) para n√∫meros")
            
            # Remover linhas com ano/m√™s inv√°lidos
            df_limpo = df.dropna(subset=['ano', 'mes']).copy()
            
            # Validar valores de ano e m√™s
            mask_ano_valido = (df_limpo['ano'] >= 1990) & (df_limpo['ano'] <= 2030)
            mask_mes_valido = (df_limpo['mes'] >= 1) & (df_limpo['mes'] <= 12)
            
            df_filtrado = df_limpo[mask_ano_valido & mask_mes_valido].copy()
            
            if len(df_filtrado) == 0:
                raise ValueError("Nenhuma data v√°lida encontrada nas colunas C (ano) e D (m√™s)")
            
            print(f"üìä {len(df_filtrado)} registros com ano/m√™s v√°lidos")
            
            # Criar coluna de data a partir do ano e m√™s
            try:
                # Criar data no primeiro dia do m√™s usando uma abordagem mais robusta
                df_filtrado['data'] = pd.to_datetime(
                    df_filtrado['ano'].astype(str) + '-' + df_filtrado['mes'].astype(str).str.zfill(2) + '-01',
                    format='%Y-%m-%d'
                )
            except Exception as e:
                print(f"‚ùå Erro ao criar datas (m√©todo 1): {e}")
                # M√©todo alternativo
                try:
                    datas_list = []
                    for idx, row in df_filtrado.iterrows():
                        ano = int(row['ano'])
                        mes = int(row['mes'])
                        data = datetime(ano, mes, 1)
                        datas_list.append(data)
                    df_filtrado['data'] = datas_list
                except Exception as e2:
                    print(f"‚ùå Erro ao criar datas (m√©todo 2): {e2}")
                    raise ValueError("Erro ao combinar ano e m√™s em datas v√°lidas")
            
            print(f"üìä {len(df_filtrado)} datas criadas com sucesso")
            
            # Processar coluna de √≠ndice
            print("üîÑ Processando coluna de √≠ndice...")
            
            # Converter √≠ndice para float, tratando v√≠rgulas decimais brasileiras
            if df_filtrado['indice'].dtype == 'object':
                # Se for texto, pode ter v√≠rgulas como separador decimal (formato brasileiro)
                df_filtrado['indice'] = df_filtrado['indice'].astype(str).str.replace(',', '.')
            
            # Converter para num√©rico
            df_filtrado['indice'] = pd.to_numeric(df_filtrado['indice'], errors='coerce')
            
            # Remover linhas com √≠ndices inv√°lidos
            df_final = df_filtrado.dropna(subset=['indice']).copy()
            
            # Verificar se temos valores v√°lidos ap√≥s convers√£o
            if len(df_final) == 0:
                raise ValueError("Nenhum √≠ndice v√°lido encontrado ap√≥s convers√£o num√©rica")
            
            print(f"üìä Convers√£o de √≠ndices: {len(df_filtrado)} ‚Üí {len(df_final)} registros v√°lidos")
            print(f"üìä Exemplo de √≠ndices convertidos: {df_final['indice'].head(3).tolist()}")
            
            # Manter apenas colunas necess√°rias
            df_final = df_final[['data', 'indice']].copy()
            
            # Ordenar por data
            df_final = df_final.sort_values('data').reset_index(drop=True)
            
            # Validar se temos dados v√°lidos
            if len(df_final) == 0:
                raise ValueError("Nenhum registro v√°lido encontrado ap√≥s processamento")
            
            # Verificar se os valores de √≠ndice fazem sentido (IGP-M base 100 em ago/1994)
            indice_min = df_final['indice'].min()
            indice_max = df_final['indice'].max()
            
            if indice_min < 50 or indice_max > 10000:
                print(f"‚ö†Ô∏è Aten√ß√£o: Valores de √≠ndice fora do esperado (min: {indice_min:.2f}, max: {indice_max:.2f})")
            
            # Verificar continuidade temporal
            periodo_min = df_final['data'].min()
            periodo_max = df_final['data'].max()
            meses_esperados = ((periodo_max.year - periodo_min.year) * 12) + (periodo_max.month - periodo_min.month) + 1
            meses_encontrados = len(df_final)
            
            if meses_encontrados < (meses_esperados * 0.8):  # Pelo menos 80% dos meses esperados
                print(f"‚ö†Ô∏è Aten√ß√£o: Poss√≠vel descontinuidade nos dados ({meses_encontrados} de {meses_esperados} meses esperados)")
            
            # Salvar resultado
            self.df_indices = df_final
            
            print(f"‚úÖ {len(df_final)} registros de √≠ndices carregados com sucesso!")
            print(f"üìä Per√≠odo: {df_final['data'].min().strftime('%Y-%m')} a {df_final['data'].max().strftime('%Y-%m')}")
            print(f"üìä √çndice inicial: {df_final['indice'].iloc[0]:.2f}")
            print(f"üìä √çndice final: {df_final['indice'].iloc[-1]:.2f}")
            print(f"üìä M√©dia do √≠ndice: {df_final['indice'].mean():.2f}")
            
            return self.df_indices
            
        except Exception as e:
            error_msg = f"‚ùå Erro ao carregar √≠ndices do Excel: {str(e)}"
            print(error_msg)
            if 'st' in locals():
                st.error(f"Erro ao processar arquivo Excel: {str(e)}")
            return None
    
    
    def buscar_indice_para_data(self, data_busca):
        """
        Busca o √≠ndice para uma data espec√≠fica
        """
        if self.df_indices is None or self.df_indices.empty:
            print("‚ö†Ô∏è Dados de √≠ndices n√£o carregados")
            return None
        
        try:
            # Converter data para per√≠odo mensal para busca
            periodo_busca = pd.Period(data_busca, freq='M')
            
            # Adicionar coluna de per√≠odo ao dataframe se n√£o existir
            if 'periodo' not in self.df_indices.columns:
                self.df_indices['periodo'] = self.df_indices['data'].dt.to_period('M')
            
            # Buscar √≠ndice exato para o per√≠odo
            resultado = self.df_indices[self.df_indices['periodo'] == periodo_busca]
            
            if not resultado.empty:
                return resultado.iloc[0]['indice']
            else:
                # Se n√£o encontrar exato, buscar o mais pr√≥ximo anterior
                indices_anteriores = self.df_indices[self.df_indices['periodo'] <= periodo_busca]
                if not indices_anteriores.empty:
                    return indices_anteriores.iloc[-1]['indice']
                else:
                    print(f"‚ö†Ô∏è N√£o foi poss√≠vel encontrar √≠ndice para {data_busca.strftime('%Y-%m')}")
                    return None
                    
        except Exception as e:
            print(f"‚ùå Erro ao buscar √≠ndice para {data_busca}: {e}")
            return None
    
    def calcular_fator_correcao(self, data_vencimento, data_base):
        """
        Calcula o fator de corre√ß√£o entre duas datas usando os √≠ndices carregados
        """
        try:
            indice_vencimento = self.buscar_indice_para_data(data_vencimento)
            indice_base = self.buscar_indice_para_data(data_base)
            
            if indice_vencimento is None or indice_base is None:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel encontrar √≠ndices para calcular corre√ß√£o")
                return 1.0  # Retorna fator neutro
            
            # Fator de corre√ß√£o = √≠ndice_base / √≠ndice_vencimento
            fator = indice_base / indice_vencimento
            
            return fator
            
        except Exception as e:
            print(f"‚ùå Erro ao calcular fator de corre√ß√£o: {e}")
            return 1.0

class CalculadorValorJusto:
    """
    Classe para c√°lculo do valor justo usando √≠ndices do Excel
    """
    
    def __init__(self):
        self.calculador_indices = CalculadorIndicesEconomicos()
        
    def carregar_dados_indices(self, arquivo_excel):
        """
        Carrega dados de √≠ndices do arquivo Excel
        """
        return self.calculador_indices.carregar_indices_do_excel(arquivo_excel)
    
    def obter_indice_para_data(self, data_busca):
        """
        Obt√©m √≠ndice para uma data espec√≠fica
        """
        return self.calculador_indices.buscar_indice_para_data(data_busca)
    
    def calcular_fator_correcao_indices(self, data_vencimento, data_base):
        """
        Calcula fator de corre√ß√£o usando os √≠ndices carregados
        """
        return self.calculador_indices.calcular_fator_correcao(data_vencimento, data_base)
    
    def calcular_valor_justo_com_di_pre(self, df_corrigido, df_di_pre, coluna_valor_corrigido='valor_corrigido', data_base=None):
        """
        Calcula valor justo aplicando taxas DI-PRE com progress√£o exponencial sobre valor corrigido
        """
        if data_base is None:
            data_base = datetime.now()
        
        df_resultado = df_corrigido.copy()
        
        # Verificar se temos coluna prazo_recebimento, sen√£o usar 6 meses como padr√£o
        if 'prazo_recebimento' not in df_resultado.columns:
            df_resultado['prazo_recebimento'] = 6
        
        # Inicializar colunas para DI-PRE
        df_resultado['taxa_di_pre'] = 0.0
        df_resultado['fator_exponencial_di_pre'] = 1.0
        
        # Para cada linha do df_resultado, buscar a taxa DI-PRE correspondente
        for idx, row in df_resultado.iterrows():
            meses_recebimento = row['prazo_recebimento']
            
            # Buscar no df_di_pre a linha onde meses_futuros √© igual ao prazo_recebimento
            linha_di_pre = df_di_pre[df_di_pre['meses_futuros'] == meses_recebimento]
            
            if not linha_di_pre.empty:
                # Pegar a primeira linha correspondente e usar a coluna '252' (taxa para 252 dias √∫teis)
                taxa_di_pre = linha_di_pre.iloc[0]['252'] / 100  # Converter de % para decimal
                df_resultado.at[idx, 'taxa_di_pre'] = taxa_di_pre
                
                # Calcular fator exponencial com DI-PRE: (1 + taxa_di_pre)^(meses_recebimento/12)
                fator_exponencial = (1 + taxa_di_pre) ** (meses_recebimento / 12)
                df_resultado.at[idx, 'fator_exponencial_di_pre'] = fator_exponencial
            else:
                # Se n√£o encontrar correspond√™ncia, usar taxa padr√£o de 0.5% ao m√™s
                taxa_padrao = 0.005
                df_resultado.at[idx, 'taxa_di_pre'] = taxa_padrao
                fator_exponencial = (1 + taxa_padrao) ** (meses_recebimento / 12)
                df_resultado.at[idx, 'fator_exponencial_di_pre'] = fator_exponencial
        
        # Dias de atraso em rela√ß√£o ao vencimento
        df_resultado['data_vencimento'] = data_base + pd.DateOffset(months=6)
        df_resultado['dias_atraso'] = (datetime.now() - df_resultado['data_vencimento']).dt.days.clip(lower=0)

        # Multa proporcional: 1% ao m√™s ‚Üí 0.01 / 30 por dia, com fallback para dias_atraso = 0
        df_resultado['multa_para_justo'] = (0.01 / 30) * df_resultado['dias_atraso']
        
        # Fallback: se dias_atraso = 0, usar multa de 0,06 (6%)
        df_resultado['multa_para_justo'] = df_resultado['multa_para_justo'].where(
            df_resultado['dias_atraso'] > 0, 
            0.06
        )
        
        # Verificar se temos coluna de taxa_recuperacao
        if 'taxa_recuperacao' in df_resultado.columns:            
            # F√≥rmula com DI-PRE: valor_justo = valor_corrigido * taxa_recuperacao * (fator_exponencial_di_pre + multa)
            df_resultado['valor_justo'] = df_resultado[coluna_valor_corrigido] * df_resultado['taxa_recuperacao'] * (df_resultado['fator_exponencial_di_pre'] + df_resultado['multa_para_justo'])
        else:
            # Fallback sem taxa de recupera√ß√£o
            df_resultado['valor_justo'] = df_resultado[coluna_valor_corrigido] * (df_resultado['fator_exponencial_di_pre'] + df_resultado['multa_para_justo'])
        
        return df_resultado
    
    def obter_estatisticas_di_pre(self, df_di_pre):
        """
        Retorna estat√≠sticas do DI-PRE calculado incluindo informa√ß√µes sobre progress√£o exponencial
        """
        if df_di_pre.empty:
            return None
        
        # Calcular estat√≠sticas b√°sicas das taxas DI-PRE (coluna '252')
        taxa_media = df_di_pre['252'].mean()
        taxa_min = df_di_pre['252'].min()
        taxa_max = df_di_pre['252'].max()
        
        return {
            'taxa_media_percentual': taxa_media,
            'taxa_min_percentual': taxa_min,
            'taxa_max_percentual': taxa_max,
            'total_registros_di_pre': len(df_di_pre),
            'meses_disponiveis': sorted(df_di_pre['meses_futuros'].unique().tolist()),
            'formula_exponencial': 'An = (1 + taxa_di_pre)^(prazo_recebimento/12)',
            'descricao_prazo': 'prazo_recebimento em meses'
        }

def show():
    """P√°gina de Corre√ß√£o Monet√°ria e Valor Justo"""
    st.header("üí∞ CORRE√á√ÉO MONET√ÅRIA e VALOR JUSTO")
    
    # Inicializar flags de controle
    if 'calculo_solicitado' not in st.session_state:
        st.session_state.calculo_solicitado = False
    if 'taxa_recuperacao_carregada' not in st.session_state:
        st.session_state.taxa_recuperacao_carregada = False
    if 'cdi_carregado' not in st.session_state:
        st.session_state.cdi_carregado = False
    if 'indices_carregados' not in st.session_state:
        st.session_state.indices_carregados = False
    
    # Verificar se temos dados padronizados
    if 'df_padronizado' not in st.session_state or st.session_state.df_padronizado.empty:
        st.warning("‚ö†Ô∏è Realize o mapeamento de campos antes de calcular a corre√ß√£o monet√°ria.")
        st.info("üí° V√° para a p√°gina de **Mapeamento** e complete o processo de mapeamento primeiro.")
        return
    
    # Verificar se os par√¢metros est√£o inicializados
    if 'params' not in st.session_state:
        from utils.parametros_correcao import ParametrosCorrecao
        st.session_state.params = ParametrosCorrecao()
    
    df_padronizado = st.session_state.df_padronizado
    calc_aging = CalculadorAging(st.session_state.params)
    calc_correcao = CalculadorCorrecao(st.session_state.params)
    
    # ETAPA 0: CARREGAMENTO DOS √çNDICES IGP-M/IPCA (OBRIGAT√ìRIO)
    st.subheader("üìä 0Ô∏è‚É£ Carregar √çndices IGP-M/IPCA")
    
    # Verificar se temos dados de √≠ndices carregados
    tem_indices = 'df_indices_economicos' in st.session_state and not st.session_state.df_indices_economicos.empty
    
    if not tem_indices:
        st.warning("‚ö†Ô∏è **PASSO 0:** Fa√ßa o upload do arquivo de √≠ndices IGP-M/IPCA para continuar.")
        
        with st.expander("üì§ Upload dos √çndices IGP-M/IPCA", expanded=True):
            st.info("""
            **üìã Instru√ß√µes:** 
            
            Fa√ßa o upload do arquivo Excel com os √≠ndices econ√¥micos. O arquivo deve conter:
            - **Coluna A**: Data no formato AAAA.MM (ex: 2022.01)
            - **Coluna F**: Valores dos √≠ndices IGP-M ou IPCA
            - Hist√≥rico completo dos √≠ndices para corre√ß√£o monet√°ria
            
            **Exemplo de estrutura esperada:**
            ```
            2021.12    543.21
            2022.01    548.65  
            2022.02    552.34
            ```
            """)
            
            # Upload do arquivo
            uploaded_file_indices = st.file_uploader(
                "üì§ Selecione o arquivo de √çndices IGP-M/IPCA",
                type=['xlsx', 'xls'],
                help="Arquivo Excel com √≠ndices econ√¥micos (colunas A e F)",
                key="upload_indices_modulo4"
            )
            
            if uploaded_file_indices is not None:
                try:
                    with st.spinner("üîÑ Processando arquivo de √≠ndices..."):
                        # Criar inst√¢ncia do calculador
                        calc_valor_justo = CalculadorValorJusto()
                        
                        # Carregar dados do Excel
                        df_indices = calc_valor_justo.carregar_dados_indices(uploaded_file_indices)
                        
                        if df_indices is not None and not df_indices.empty:
                            st.session_state.df_indices_economicos = df_indices
                            st.session_state.calculador_valor_justo = calc_valor_justo
                            st.session_state.indices_carregados = True
                            
                            st.success(f"‚úÖ **{len(df_indices)} registros de √≠ndices carregados com sucesso!**")
                            
                            # Mostrar estat√≠sticas dos dados carregados
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("üìä Total de Registros", f"{len(df_indices):,}")
                            with col2:
                                periodo_min = df_indices['data'].min().strftime('%Y-%m')
                                periodo_max = df_indices['data'].max().strftime('%Y-%m')
                                st.metric("üìÖ Per√≠odo", f"{periodo_min} a {periodo_max}")
                            with col3:
                                indice_atual = df_indices['indice'].iloc[-1]
                                st.metric("üìà √öltimo √çndice", f"{indice_atual:.2f}")
                            
                            # Mostrar preview dos dados (fora do expander)
                            st.write("**üìã Preview dos √çndices Carregados:**")
                            st.dataframe(df_indices.head(10), use_container_width=True)
                            
                            st.rerun()
                        else:
                            st.error("‚ùå N√£o foi poss√≠vel processar o arquivo. Verifique a estrutura (colunas A e F).")
                            
                except Exception as e:
                    st.error(f"‚ùå Erro ao processar arquivo: {str(e)}")
                    st.error("Verifique se o arquivo possui as colunas A (data) e F (√≠ndice) com dados v√°lidos.")

        # Se n√£o tem √≠ndices, parar aqui
        return
    else:
        st.success("‚úÖ **√çndices IGP-M/IPCA carregados**")
        registros_indices = len(st.session_state.df_indices_economicos)
        periodo_min = st.session_state.df_indices_economicos['data'].min().strftime('%Y-%m')
        periodo_max = st.session_state.df_indices_economicos['data'].max().strftime('%Y-%m')
        st.info(f"üìä {registros_indices} registro(s) de √≠ndices dispon√≠vel(eis) ({periodo_min} a {periodo_max})")
        
        if st.button("üîÑ Recarregar √çndices"):
            st.session_state.indices_carregados = False
            st.session_state.taxa_recuperacao_carregada = False
            st.session_state.cdi_carregado = False
            st.session_state.calculo_solicitado = False
            if 'df_indices_economicos' in st.session_state:
                del st.session_state.df_indices_economicos
            if 'calculador_valor_justo' in st.session_state:
                del st.session_state.calculador_valor_justo
            st.rerun()

        # Mostrar o head dos dados num expander
        with st.expander("üìä Preview dos √çndices Carregados", expanded=False):
            if 'df_indices_economicos' in st.session_state:
                st.dataframe(st.session_state.df_indices_economicos.head(10), use_container_width=True)

    st.markdown("---")
    
    # ETAPA 1: CARREGAMENTO DA TAXA DE RECUPERA√á√ÉO (OBRIGAT√ìRIO)
    st.subheader("üìà 1Ô∏è‚É£ Configurar Taxa de Recupera√ß√£o")
    
    # Verificar se temos dados de taxa de recupera√ß√£o
    tem_taxa_recuperacao = 'df_taxa_recuperacao' in st.session_state and not st.session_state.df_taxa_recuperacao.empty
    
    if not tem_taxa_recuperacao:
        st.warning("‚ö†Ô∏è **PASSO 1:** Fa√ßa o upload do arquivo de taxa de recupera√ß√£o para continuar.")
        
        with st.expander("üì§ Upload da Taxa de Recupera√ß√£o", expanded=True):
            st.info("""
            **üìã Instru√ß√µes:** 
            
            Fa√ßa o upload do arquivo Excel com as taxas de recupera√ß√£o. O arquivo deve conter:
            - Uma aba chamada "Input" 
            - Estrutura com empresas marcadas com "x" 
            - Tipos: Privada, P√∫blico, Hospital
            - Aging: A vencer, Primeiro ano, Segundo ano, Terceiro ano, Demais anos
            - Taxas e prazos de recebimento
            """)
            
            # Upload do arquivo
            uploaded_file_taxa = st.file_uploader(
                "üì§ Selecione o arquivo de Taxa de Recupera√ß√£o",
                type=['xlsx', 'xls'],
                help="Arquivo Excel com as taxas de recupera√ß√£o por empresa, tipo e aging",
                key="upload_taxa_modulo4"
            )
            
            if uploaded_file_taxa is not None:
                try:
                    with st.spinner("üîÑ Processando arquivo de taxa de recupera√ß√£o..."):
                        # [C√≥digo de processamento mantido igual]
                        df_taxa_upload = pd.read_excel(uploaded_file_taxa, sheet_name="Input", header=None)
                        
                        tipos = ["Privado", "P√∫blico", "Hospital"]
                        aging_labels = ["A vencer", "Primeiro ano", "Segundo ano", "Terceiro ano", "Demais anos"]
                        
                        empresa = None
                        dados_taxa = []
                        
                        for i in range(len(df_taxa_upload)):
                            row = df_taxa_upload.iloc[i]

                            for j in range(len(row) - 1):
                                if str(row[j]).strip().lower() == "x":
                                    empresa = str(row[j + 1]).strip()

                            if not empresa:
                                continue

                            for offset, tipo in zip([1, 5, 9], tipos):
                                try:
                                    aging = str(row[offset]).strip()
                                    taxa = row[offset + 1]
                                    prazo = row[offset + 2]

                                    if aging in aging_labels and pd.notna(taxa) and pd.notna(prazo):
                                        dados_taxa.append({
                                            "Empresa": empresa,
                                            "Tipo": tipo,
                                            "Aging": aging,
                                            "Taxa de recupera√ß√£o": float(str(taxa).replace(",", ".")),
                                            "Prazo de recebimento": int(prazo)
                                        })
                                except (IndexError, ValueError):
                                    continue
                        
                        if dados_taxa:
                            df_taxa_recuperacao_nova = pd.DataFrame(dados_taxa)
                            st.session_state.df_taxa_recuperacao = df_taxa_recuperacao_nova
                            st.session_state.taxa_recuperacao_carregada = True
                            
                            # Resetar flags subsequentes
                            st.session_state.cdi_carregado = False
                            st.session_state.calculo_solicitado = False
                            if 'df_final' in st.session_state:
                                del st.session_state.df_final
                            if 'df_com_aging' in st.session_state:
                                del st.session_state.df_com_aging
                            
                            st.rerun()
                        else:
                            st.error("‚ùå Nenhum dado v√°lido encontrado no arquivo. Verifique a estrutura do arquivo.")
                            
                except Exception as e:
                    st.error(f"‚ùå Erro ao processar arquivo: {str(e)}")
                    st.error("Verifique se o arquivo possui uma aba 'Input' e se a estrutura est√° correta.")

        # Se n√£o tem taxa, parar aqui
        return
    else:
        st.success("‚úÖ **Taxa de recupera√ß√£o carregada**")
        empresas = st.session_state.df_taxa_recuperacao['Empresa'].nunique()
        registros = len(st.session_state.df_taxa_recuperacao)
        st.info(f"üè¢ {empresas} empresa(s) configurada(s) com {registros} registro(s) de taxa")
        
        if st.button("üîÑ Recarregar Taxa de Recupera√ß√£o"):
            st.session_state.taxa_recuperacao_carregada = False
            st.session_state.cdi_carregado = False
            st.session_state.calculo_solicitado = False
            if 'df_taxa_recuperacao' in st.session_state:
                del st.session_state.df_taxa_recuperacao
            st.rerun()

        # Mostrar o head dos dados num expander
        with st.expander("üìä Preview dos Dados de Taxa de Recupera√ß√£o", expanded=False):
            if 'df_taxa_recuperacao' in st.session_state:
                st.dataframe(st.session_state.df_taxa_recuperacao.head(10), use_container_width=True)

    st.markdown("---")
    
    # ETAPA 2: CARREGAMENTO DO ARQUIVO CDI (OBRIGAT√ìRIO)
    st.subheader("üìà 2Ô∏è‚É£ Carregar Dados CDI/DI-PRE")
    
    # Verificar se temos dados CDI carregados
    tem_cdi = 'df_di_pre' in st.session_state and not st.session_state.df_di_pre.empty
    
    if not tem_cdi:
        st.warning("‚ö†Ô∏è **PASSO 2:** Fa√ßa o upload do arquivo CDI/DI-PRE para continuar.")
        
        with st.expander("üì§ Upload do Arquivo CDI/DI-PRE", expanded=True):
            st.info("""
            **üìã Instru√ß√µes:** 
            
            Fa√ßa o upload do arquivo Excel (.xls ou .xlsx) com os dados de CDI/DI-PRE da BMF.
            Este arquivo cont√©m as taxas de juros utilizadas para corre√ß√£o monet√°ria.
            
            **Formato esperado:** Arquivo HTML/Excel da BMF com dados de DI x pr√©
            """)
            
            # Upload do arquivo CDI
            uploaded_file_cdi = st.file_uploader(
                "üì§ Selecione o arquivo CDI/DI-PRE",
                type=['xlsx', 'xls'],
                help="Arquivo Excel com dados de CDI/DI-PRE da BMF",
                key="upload_cdi_modulo4"
            )
            
            if uploaded_file_cdi is not None:
                try:
                    with st.spinner("üîÑ Processando arquivo CDI/DI-PRE..."):
                        # Importar e usar o processador CDI
                        from utils.processador_di_pre import ProcessadorDIPre
                        
                        processador = ProcessadorDIPre()
                        df_cdi_processado = processador.processar_arquivo_bmf(uploaded_file_cdi)
                        
                        if df_cdi_processado is not None and not df_cdi_processado.empty:
                            st.session_state.df_di_pre = df_cdi_processado
                            st.session_state.cdi_carregado = True
                            
                            # Resetar flag de c√°lculo
                            st.session_state.calculo_solicitado = False
                            if 'df_final' in st.session_state:
                                del st.session_state.df_final
                            if 'df_com_aging' in st.session_state:
                                del st.session_state.df_com_aging

                            # Tratar dados df_di_pre - transformar dias em meses, usando float
                            # pegar o ano da data_arquivo
                            st.session_state.df_di_pre['meses_futuros'] = (st.session_state.df_di_pre['dias_corridos'] / 30.44)
                            
                            #Filtrar dados para m√™s sendo o mais pr√≥ximo do numero inteiro seguindo a sequ√™ncia 1,2,3,4,5,6...

                            # Lista para armazenar os √≠ndices das linhas que ser√£o selecionadas.
                            indices_para_manter = []

                            # Determina o valor m√°ximo de meses para saber at√© onde iterar.
                            # O `+ 2` garante que o loop inclua o √∫ltimo m√™s.
                            limite_mes = int(st.session_state.df_di_pre['meses_futuros'].max()) + 2

                            # Itera de 1 at√© o limite de meses.
                            for i in range(1, limite_mes):
                                # Encontra o √≠ndice da linha que tem o valor 'mes' mais pr√≥ximo do inteiro 'i'.
                                indice_mais_proximo = (st.session_state.df_di_pre['meses_futuros'] - i).abs().idxmin()
                                indices_para_manter.append(indice_mais_proximo)

                            # Filtra o DataFrame original usando os √≠ndices encontrados e remove duplicatas.
                            df_filtrado = st.session_state.df_di_pre.loc[indices_para_manter].drop_duplicates()

                            # Ou salvar em uma nova vari√°vel de estado para usar depois:
                            st.session_state.df_di_pre = df_filtrado

                            # arredonda o mes
                            st.session_state.df_di_pre['meses_futuros'] = st.session_state.df_di_pre['meses_futuros'].round().astype(int)

                            # 1. Garanta que a coluna de data esteja no formato datetime do pandas.
                            st.session_state.df_di_pre['data_arquivo'] = pd.to_datetime(st.session_state.df_di_pre['data_arquivo'], format='%Y-%m-%d')

                            # 2. Calcule a data futura somando os dias corridos.
                            #    A fun√ß√£o pd.to_timedelta converte o n√∫mero de dias para um formato que pode ser somado a datas.
                            data_futura = st.session_state.df_di_pre['data_arquivo'] + pd.to_timedelta(st.session_state.df_di_pre['dias_corridos'], unit='d')

                            # 3. Crie as novas colunas 'ano_atual' e 'mes_atual' a partir da data futura.
                            st.session_state.df_di_pre['ano_atual'] = data_futura.dt.year
                            st.session_state.df_di_pre['mes_atual'] = data_futura.dt.month

                            st.rerun()  # Recarregar a p√°gina para atualizar o estado
                        else:
                            st.error("‚ùå N√£o foi poss√≠vel processar o arquivo CDI. Verifique o formato do arquivo.")
                            
                except Exception as e:
                    st.error(f"‚ùå Erro ao processar arquivo CDI: {str(e)}")
                    st.error("Verifique se o arquivo est√° no formato correto da BMF.")

        # Se n√£o tem CDI, parar aqui
        return
    else:
        st.success("‚úÖ **Dados CDI/DI-PRE carregados**")
        registros_cdi = len(st.session_state.df_di_pre)
        st.info(f"ÔøΩ {registros_cdi} registro(s) de CDI/DI-PRE dispon√≠vel(eis)")
        
        # Mostrar bot√£o para recarregar se necess√°rio
        if st.button("üîÑ Recarregar Dados CDI"):
            st.session_state.cdi_carregado = False
            st.session_state.calculo_solicitado = False
            if 'df_di_pre' in st.session_state:
                del st.session_state.df_di_pre
            st.rerun()  # Recarregar a p√°gina para atualizar o estado

        # Mostrar o head dos dados num expander
        if 'df_di_pre' in st.session_state:
            with st.expander("üìä Preview dos Dados CDI/DI-PRE", expanded=False):
                st.dataframe(st.session_state.df_di_pre.head(10), use_container_width=True)

    st.markdown("---")
    
    # ETAPA 3: INFORMA√á√ïES E C√ÅLCULO
    st.subheader("üìä 3Ô∏è‚É£ Executar C√°lculo")
    
    # Se√ß√£o de informa√ß√µes antes do c√°lculo
    st.write("**Informa√ß√µes do Processamento:**")
    
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col1:
        st.metric("üìä Registros a Processar", f"{len(df_padronizado):,}")
    
    with col2:
        empresas_dados = df_padronizado['empresa'].nunique() if 'empresa' in df_padronizado.columns else 0
        st.metric("üè¢ Empresas nos Dados", empresas_dados)
    
    with col3:
        registros_indices = len(st.session_state.df_indices_economicos)
        st.metric("üìà Registros √çndices", registros_indices)
    
    with col4:
        empresas_taxa = st.session_state.df_taxa_recuperacao['Empresa'].nunique()
        st.metric("üè¢ Empresas com Taxa", empresas_taxa)
    
    with col5:
        registros_taxa = len(st.session_state.df_taxa_recuperacao)
        st.metric("üìà Registros de Taxa", registros_taxa)
    
    with col6:
        registros_cdi = len(st.session_state.df_di_pre)
        st.metric("üìä Registros CDI", registros_cdi)
    
    # Verificar se todos os arquivos necess√°rios est√£o carregados
    tem_todos_arquivos = (
        tem_indices and 
        tem_taxa_recuperacao and 
        tem_cdi
    )
    
    # Bot√£o para calcular corre√ß√£o (S√ì APARECE SE TIVER TODOS OS ARQUIVOS)
    st.markdown("---")
    if tem_todos_arquivos:
        st.write("**‚úÖ Todos os arquivos carregados! Agora voc√™ pode executar o c√°lculo:**")
        calculo_executado = st.button("üí∞ Calcular Corre√ß√£o Monet√°ria Completa", type="primary", use_container_width=True)
    else:
        arquivos_faltantes = []
        if not tem_indices:
            arquivos_faltantes.append("üìä √çndices IGP-M/IPCA")
        if not tem_taxa_recuperacao:
            arquivos_faltantes.append("üìà Taxa de Recupera√ß√£o")
        if not tem_cdi:
            arquivos_faltantes.append("üìä Dados CDI/DI-PRE")
        
        st.warning(f"‚ö†Ô∏è **Arquivos pendentes:** {', '.join(arquivos_faltantes)}")
        st.info("üí° Complete o carregamento de todos os arquivos acima para executar o c√°lculo.")
        calculo_executado = False
    
    if calculo_executado:
        # Marcar que o c√°lculo foi solicitado pelo usu√°rio
        st.session_state.calculo_solicitado = True
        
        try:
            with st.spinner("‚öôÔ∏è Processando aging e calculando corre√ß√£o monet√°ria..."):
                # Primeiro, calcular aging automaticamente
                df_com_aging = calc_aging.processar_aging_completo(df_padronizado.copy())
                
                if df_com_aging.empty:
                    st.error("‚ùå Erro ao calcular aging. Verifique os dados de entrada.")
                    return
                
                # ========== USAR M√âTODO CORRETO DO CALCULADOR DE CORRE√á√ÉO ==========
                st.info("üìä Calculando corre√ß√£o monet√°ria completa...")
                
                # Usar o m√©todo correto que automaticamente calcula valor_liquido
                df_final_temp = calc_correcao.processar_correcao_completa_com_recuperacao(
                    df_com_aging.copy(), 
                    "Distribuidora", 
                    st.session_state.df_taxa_recuperacao
                )
                
                if 'calculador_valor_justo' in st.session_state and 'df_indices_economicos' in st.session_state:
                    st.info("üìä Aplicando √≠ndices customizados do Excel usando c√°lculo di√°rio com merge...")

                    # Preparar DataFrame de √≠ndices
                    df_indices = st.session_state.df_indices_economicos.copy()
                    df_indices['data'] = pd.to_datetime(df_indices['data'])
                    df_indices = df_indices.sort_values('data')
                    
                    # Criar √≠ndices com m√™s seguinte para c√°lculo da taxa mensal
                    df_indices['data_mes_seguinte'] = df_indices['data'].shift(-1)
                    df_indices['indice_mes_seguinte'] = df_indices['indice'].shift(-1)
                    
                    # Calcular taxa mensal = indice_atual - indice_anterior (diferen√ßa simples)
                    df_indices['taxa_mensal'] = df_indices['indice_mes_seguinte'] / df_indices['indice'] - 1
                    df_indices['taxa_diaria'] = (df_indices['taxa_mensal'] + 1) ** (1/30) - 1

                    # Preparar DataFrame principal
                    df_final_temp = df_final_temp.copy()
                    df_final_temp['data_vencimento_limpa'] = pd.to_datetime(df_final_temp['data_vencimento_limpa'], errors='coerce')
                    df_final_temp['data_base'] = pd.to_datetime(df_final_temp['data_base'], errors='coerce')

                    # ==== MERGE 1: DATA BASE ====
                    # Criar coluna auxiliar para merge (ano-m√™s)
                    df_indices['ano_mes'] = df_indices['data'].dt.to_period('M')
                    df_final_temp['ano_mes_base'] = df_final_temp['data_base'].dt.to_period('M')
                    df_final_temp['ano_mes_venc'] = df_final_temp['data_vencimento_limpa'].dt.to_period('M')
                    
                    # Merge com data base
                    df_merged_base = df_final_temp.merge(
                        df_indices[['ano_mes', 'indice', 'taxa_mensal', 'data']].rename(columns={
                            'ano_mes': 'ano_mes_base',
                            'indice': 'indice_mes_base', 
                            'taxa_mensal': 'taxa_mensal_base',
                            'taxa_diaria': 'taxa_diaria_base',
                            'data': 'data_fechamento_base'
                        }),
                        on='ano_mes_base',
                        how='left'
                    )
                    
                    # ==== MERGE 2: DATA VENCIMENTO ====
                    df_merged_completo = df_merged_base.merge(
                        df_indices[['ano_mes', 'indice', 'taxa_mensal', 'data']].rename(columns={
                            'ano_mes': 'ano_mes_venc',
                            'indice': 'indice_mes_venc',
                            'taxa_mensal': 'taxa_mensal_venc',
                            'taxa_diaria': 'taxa_diaria_venc',
                            'data': 'data_fechamento_venc'
                        }),
                        on='ano_mes_venc',
                        how='left'
                    )
                    
                    # ==== C√ÅLCULO DOS √çNDICES DI√ÅRIOS ====
                    # Fun√ß√£o para calcular √≠ndice na data espec√≠fica
                    def calcular_indice_diario(row, tipo='base'):
                        if tipo == 'base':
                            data = row['data_base']
                            indice_mes = row['indice_mes_base']
                            taxa_mensal = row['taxa_mensal_base']
                            taxa_diaria = row['taxa_diaria_base']
                            data_fechamento = row['data_fechamento_base']
                        else:  # vencimento
                            data = row['data_vencimento_limpa']
                            taxa_diaria = row['taxa_diaria_venc']
                            data_fechamento = row['data_fechamento_venc']
                        
                        if pd.isna(data) or pd.isna(indice_mes) or pd.isna(taxa_mensal):
                            return indice_mes if not pd.isna(indice_mes) else np.nan
                        
                        # Se a data √© no fechamento do m√™s, usar √≠ndice direto
                        if data.day == data_fechamento.day:
                            return indice_mes
                        
                        # Calcular dias do m√™s e dias do per√≠odo
                        dias_mes = data_fechamento.days_in_month
                        dias_periodo = data.day
                        
                        # Taxa do per√≠odo = (1 + taxa_mensal/100)^(dias/dias_mes) - 1
                        taxa_periodo = ((1 + taxa_diaria) ** (dias_periodo) - 1)

                        # √çndice na data = indice_mes_anterior * (1 + taxa_do_periodo)
                        indice_na_data = indice_mes + (taxa_periodo*100)
                        
                        return indice_na_data
                    
                    # Aplicar c√°lculo vetorizado
                    st.info("üìä Calculando √≠ndices di√°rios para data base...")
                    df_merged_completo['indice_base_diario'] = df_merged_completo.apply(
                        lambda row: calcular_indice_diario(row, 'base'), axis=1
                    )
                    
                    st.info("üìä Calculando √≠ndices di√°rios para data vencimento...")
                    df_merged_completo['indice_venc_diario'] = df_merged_completo.apply(
                        lambda row: calcular_indice_diario(row, 'vencimento'), axis=1
                    )
                    
                    # ==== C√ÅLCULO DO FATOR DE CORRE√á√ÉO ====
                    # Mask para registros v√°lidos
                    mask_validos = (
                        df_merged_completo['indice_base_diario'].notna()
                        & df_merged_completo['indice_venc_diario'].notna()
                        & (df_merged_completo['indice_base_diario'] > 0)
                        & (df_merged_completo['indice_venc_diario'] > 0)
                    )
                    
                    # Fator de corre√ß√£o = indice_vencimento / indice_base
                    df_merged_completo['fator_correcao_ate_data_base'] = 1.0  # Default
                    df_merged_completo.loc[mask_validos, 'fator_correcao_ate_data_base'] = (
                        df_merged_completo.loc[mask_validos, 'indice_base_diario'] /
                        df_merged_completo.loc[mask_validos, 'indice_venc_diario']
                    )
                    
                    # ==== APLICAR CORRE√á√ÉO MONET√ÅRIA ====
                    df_merged_completo['correcao_monetaria'] = np.maximum(
                        df_merged_completo['valor_liquido'] *
                        (df_merged_completo['fator_correcao_ate_data_base'] - 1),
                        0
                    )

                    df_merged_completo['valor_corrigido'] = (
                        df_merged_completo['valor_liquido'] +
                        df_merged_completo['multa'] +
                        df_merged_completo['juros_moratorios'] +
                        df_merged_completo['correcao_monetaria']
                    )

                    if 'taxa_recuperacao' in df_merged_completo.columns:
                        df_merged_completo['valor_recuperavel'] = (
                            df_merged_completo['valor_corrigido'] *
                            df_merged_completo['taxa_recuperacao']
                        )

                    # Atualizar colunas finais
                    df_merged_completo.loc[mask_validos, 'indice_vencimento'] = df_merged_completo.loc[mask_validos, 'indice_venc_diario']
                    df_merged_completo.loc[mask_validos, 'indice_base'] = df_merged_completo.loc[mask_validos, 'indice_base_diario']

                    registros_customizados = mask_validos.sum()
                    total_registros = len(df_merged_completo)
                    percentual = (registros_customizados / total_registros) * 100

                    st.success(f"‚úÖ Corre√ß√£o di√°ria aplicada com merge: {registros_customizados:,}/{total_registros:,} registros ({percentual:.1f}%)")

                    # Limpar colunas auxiliares
                    colunas_temp = [
                        'ano_mes_base', 'ano_mes_venc', 'indice_mes_base', 'indice_mes_venc',
                        'taxa_mensal_base', 'taxa_mensal_venc', 'data_fechamento_base', 'data_fechamento_venc',
                        'indice_base_diario', 'indice_venc_diario'
                    ]
                    df_final_temp = df_merged_completo.drop(columns=[col for col in colunas_temp if col in df_merged_completo.columns])
                    
                else:
                    st.info("‚ÑπÔ∏è Usando corre√ß√£o padr√£o do sistema (IGPM/IPCA autom√°tico)")

                
                if df_final_temp.empty:
                    st.error("‚ùå Erro ao processar corre√ß√£o monet√°ria.")
                    return

                # ==== APLICAR CORRE√á√ÉO MONET√ÅRIA ====
                df_final_temp['correcao_monetaria'] = np.maximum(
                    df_final_temp['valor_liquido'] *
                    (df_final_temp['fator_correcao_ate_data_base'] - 1),
                    0
                )

                df_final_temp['valor_corrigido'] = (
                    df_final_temp['valor_liquido'] +
                    df_final_temp['multa'] +
                    df_final_temp['juros_moratorios'] +
                    df_final_temp['correcao_monetaria']
                )


                df_final_temp['valor_recuperavel'] = (
                        df_final_temp['valor_corrigido'] *
                        df_final_temp['taxa_recuperacao']
                    )

                st.dataframe(df_final_temp.head(10), use_container_width=True)

                # ==================== C√ÅLCULO DO VALOR JUSTO COM DI-PRE & IPCA ====================
                st.info("üìä Calculando valor justo com taxas DI-PRE & IPCA...")

                try:
                    # Verificar se temos dados DI-PRE dispon√≠veis
                    if st.session_state.df_di_pre.empty:
                        st.warning("‚ö†Ô∏è Dados DI-PRE n√£o dispon√≠veis. Usando taxa padr√£o.")
                        taxa_di_pre_6m = 0.10  # 10% ao ano como fallback
                    else:
                        # Buscar taxa DI-PRE para 6 meses (prazo padr√£o de recebimento)
                        linha_6m = st.session_state.df_di_pre[st.session_state.df_di_pre['meses_futuros'] == 6]
                        if not linha_6m.empty:
                            taxa_di_pre_6m = linha_6m.iloc[0]['252'] / 100  # Converter de % para decimal
                        else:
                            st.warning("‚ö†Ô∏è Taxa DI-PRE para 6 meses n√£o encontrada. Usando valor m√©dio.")
                            taxa_di_pre_6m = st.session_state.df_di_pre['252'].mean() / 100
                    
                    # ============= ETAPA 1: PREPARAR DADOS BASE =============
                    # Garantir que data_base seja datetime
                    if 'data_base' not in df_final_temp.columns:
                        df_final_temp['data_base'] = datetime.now()
                    df_final_temp['data_base'] = pd.to_datetime(df_final_temp['data_base'], errors='coerce')
                    
                    # Usar prazo_recebimento da taxa de recupera√ß√£o se dispon√≠vel, sen√£o 6 meses
                    if 'prazo_recebimento' not in df_final_temp.columns:
                        df_final_temp['prazo_recebimento'] = 6  # Padr√£o: 6 meses
                    
                    # ============= ETAPA 2: C√ÅLCULO DA TAXA DI-PRE ANUALIZADA =============
                    df_final_temp['di_pre_taxa_anual'] = taxa_di_pre_6m
                    
                    # Aplicar spread de risco de 2.5% sobre a taxa DI-PRE
                    spread_risco = 2.5  # 2.5%
                    df_final_temp['taxa_di_pre_total_anual'] = (1 + df_final_temp['di_pre_taxa_anual']) * (1 + spread_risco / 100) - 1

                    # Converter taxa anual para mensal: (1 + taxa_anual)^(1/12) - 1
                    df_final_temp['taxa_desconto_mensal'] = (1 + df_final_temp['taxa_di_pre_total_anual']) ** (1/12) - 1

                    # ============= ETAPA 3: C√ÅLCULO DO PER√çODO AT√â RECEBIMENTO =============
                    # Data estimada de recebimento (data_base + prazo_recebimento em meses)
                    def calcular_data_recebimento(row):
                        try:
                            data_base = row.get('data_base', datetime.now())
                            prazo = 6
                            return pd.to_datetime(data_base) + pd.DateOffset(months=int(prazo))
                        except:
                            return datetime.now() + pd.DateOffset(months=6)
                    
                    df_final_temp['data_recebimento_estimada'] = df_final_temp.apply(calcular_data_recebimento, axis=1)
                    
                    # Calcular meses at√© o recebimento
                    df_final_temp['meses_ate_recebimento'] = 6  # Padr√£o: 6 meses

                    # ============= ETAPA 3.1: C√ÅLCULO DO IPCA MENSAL REAL DOS DADOS DO EXCEL =============
                    st.info("üìä Calculando IPCA mensal real baseado nos √≠ndices carregados...")
                    
                    # Buscar data atual e data de 12 meses atr√°s nos dados carregados
                    data_hoje = datetime.now()
                    data_12m_atras = data_hoje - pd.DateOffset(months=12)
                    
                    # Formatar datas para busca (YYYY.MM)
                    data_hoje_formatada = data_hoje.strftime('%Y.%m')
                    data_12m_formatada = data_12m_atras.strftime('%Y.%m')
                    
                    # Buscar √≠ndices correspondentes no DataFrame de √≠ndices
                    df_indices = st.session_state.df_indices_economicos.copy()
                    df_indices['data_formatada'] = df_indices['data'].dt.strftime('%Y.%m')
                    
                    # Buscar √≠ndice atual (mais pr√≥ximo da data de hoje)
                    indice_atual = None
                    indice_12m = None
                    
                    # Tentar encontrar √≠ndice exato, sen√£o buscar o mais pr√≥ximo
                    filtro_atual = df_indices[df_indices['data_formatada'] == data_hoje_formatada]
                    if not filtro_atual.empty:
                        indice_atual = filtro_atual.iloc[0]['indice']
                    else:
                        # Buscar o mais recente dispon√≠vel
                        df_indices_ordenado = df_indices.sort_values('data', ascending=False)
                        indice_atual = df_indices_ordenado.iloc[0]['indice']
                        st.info(f"üìÖ Usando √≠ndice mais recente dispon√≠vel: {df_indices_ordenado.iloc[0]['data'].strftime('%Y-%m')}")
                    
                    # Buscar √≠ndice de 12 meses atr√°s
                    filtro_12m = df_indices[df_indices['data_formatada'] == data_12m_formatada]
                    if not filtro_12m.empty:
                        indice_12m = filtro_12m.iloc[0]['indice']
                    else:
                        # Buscar o mais pr√≥ximo de 12 meses atr√°s
                        df_indices['diferenca_12m'] = abs((df_indices['data'] - data_12m_atras).dt.days)
                        indice_mais_proximo_12m = df_indices.loc[df_indices['diferenca_12m'].idxmin()]
                        indice_12m = indice_mais_proximo_12m['indice']
                        st.info(f"üìÖ Usando √≠ndice mais pr√≥ximo de 12m atr√°s: {indice_mais_proximo_12m['data'].strftime('%Y-%m')}")
                    
                    # Calcular IPCA anual e mensal
                    if indice_atual and indice_12m and indice_12m > 0:
                        # IPCA anual = (√≠ndice_atual / √≠ndice_12m_atr√°s) - 1
                        ipca_anual = (indice_atual / indice_12m) - 1
                        
                        # IPCA mensal = (1 + ipca_anual)^(1/12) - 1
                        ipca_mensal_calculado = ((1 + ipca_anual) ** (1/12)) - 1
                        
                        # Aplicar o IPCA mensal calculado para todos os registros
                        df_final_temp['ipca_mensal'] = ipca_mensal_calculado
                        
                        st.success(f"""
                        ‚úÖ **IPCA mensal calculado com dados reais do Excel!**
                        üìä √çndice Atual: {indice_atual:.2f}
                        üìä √çndice 12m Atr√°s: {indice_12m:.2f}
                        üìà IPCA Anual: {ipca_anual*100:.2f}%
                        ÔøΩ IPCA Mensal: {ipca_mensal_calculado*100:.4f}%
                        """)
                        
                    else:
                        # Fallback se n√£o conseguir calcular
                        df_final_temp['ipca_mensal'] = 0.0037  # 4.5% ao ano
                        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel calcular IPCA dos dados. Usando taxa padr√£o de 4.5% a.a.")
                    
                    
                    # Calcular o fator de corre√ß√£o com IPCA
                    df_final_temp['fator_correcao_ate_recebimento'] = (1 + df_final_temp['ipca_mensal']) ** df_final_temp['meses_ate_recebimento']

                    # ============= ETAPA 4: APLICAR TAXA DE DESCONTO =============
                    # Fator de capitaliza√ß√£o composta: (1 + taxa_mensal)^meses
                    df_final_temp['fator_de_desconto'] = (1 + df_final_temp['taxa_desconto_mensal'] ) ** df_final_temp['meses_ate_recebimento']
                    
                    # ============= ETAPA 5: C√ÅLCULO DE MULTA POR ATRASO =============
                    # Data atual para c√°lculo de atraso
                    data_atual = datetime.now()
                    
                    # Calcular dias de atraso em rela√ß√£o √† data de recebimento estimada
                    df_final_temp['dias_atraso'] = (data_atual - df_final_temp['data_recebimento_estimada']).dt.days.clip(lower=0)
                    
                    # Multa por atraso: 1% ao m√™s = 0.01/30 por dia
                    taxa_multa_diaria = 0.01 / 30
                    df_final_temp['multa_atraso'] = df_final_temp['dias_atraso'] * taxa_multa_diaria
                    
                    # Aplicar multa m√≠nima de 6% mesmo sem atraso (margem de seguran√ßa)
                    multa_minima = 0.06
                    df_final_temp['multa_final'] = df_final_temp['multa_atraso'].clip(lower=multa_minima)
                    
                    # ============= ETAPA 6: C√ÅLCULO FINAL DO VALOR JUSTO =============
                    # Verificar se temos taxa_recuperacao
                    if 'taxa_recuperacao' in df_final_temp.columns:
                        # F√≥rmula completa: valor_corrigido √ó taxa_recuperacao √ó (fator_capitaliza√ß√£o + multa)
                        df_final_temp['valor_justo'] = (
                            df_final_temp['valor_corrigido'] * 
                            df_final_temp['taxa_recuperacao'] * 
                            (df_final_temp['fator_correcao_ate_recebimento'] + df_final_temp['multa_final']) /
                            df_final_temp['fator_de_desconto']
                        )
                    else:
                        # Fallback sem taxa de recupera√ß√£o
                        df_final_temp['valor_justo'] = (
                            df_final_temp['valor_corrigido'] * 
                            (df_final_temp['fator_correcao_ate_recebimento'] + df_final_temp['multa_final']) /
                            df_final_temp['fator_de_desconto']
                        )
                    
                    # ============= ETAPA 7: ADICIONAR COLUNAS INFORMATIVAS =============
                    
                    # Salvar resultado no session_state
                    st.session_state.df_final = df_final_temp
                    
                    # Calcular estat√≠sticas do DI-PRE para exibi√ß√£o
                    calc_valor_justo = CalculadorValorJusto()
                    stats_di_pre = calc_valor_justo.obter_estatisticas_di_pre(st.session_state.df_di_pre)
                    st.session_state.stats_di_pre_valor_justo = stats_di_pre
                    
                    st.success("‚úÖ Corre√ß√£o monet√°ria e valor justo calculados com sucesso!")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro no c√°lculo do valor justo: {str(e)}")
                    st.warning("‚ö†Ô∏è Continuando com dados b√°sicos (sem valor justo)")
                    # Salvar dados b√°sicos mesmo com erro no valor justo
                    st.session_state.df_final = df_final_temp
                    st.exception(e)  # Debug detalhado
                    
        except Exception as e:
            st.error(f"‚ùå Erro ao processar corre√ß√£o: {str(e)}")
            st.exception(e)  # Debug

    # Mostrar resultados APENAS se o c√°lculo foi solicitado pelo usu√°rio E temos dados calculados
    calculo_foi_solicitado = st.session_state.get('calculo_solicitado', False)
    tem_dados_calculados = 'df_final' in st.session_state and not st.session_state.df_final.empty
    
    # Adicionar informa√ß√£o quando tudo est√° pronto mas o c√°lculo n√£o foi executado
    if not calculo_foi_solicitado and tem_taxa_recuperacao:
        st.info("üí° **Tudo pronto!** Clique no bot√£o 'Calcular Corre√ß√£o Monet√°ria' acima para executar os c√°lculos.")
    
    if calculo_foi_solicitado and tem_dados_calculados:
        
        st.markdown("---")
        
        # Resultados da Corre√ß√£o Monet√°ria
        st.subheader("üí∞ Resultados da Corre√ß√£o Monet√°ria e Valor Justo")
        
        # Verificar se temos as novas colunas calculadas
        colunas_valor_justo_novo = ['fator_correcao_ate_recebimento', 'taxa_di_pre_mensal_efetiva', 'taxa_di_pre_aplicada', 'spread_risco_aplicado']
        tem_calculos_novos = all(col in st.session_state.df_final.columns for col in colunas_valor_justo_novo)
        
        # Verificar se temos colunas de taxa de recupera√ß√£o e valor justo
        colunas_taxa = ['aging_taxa', 'taxa_recuperacao', 'prazo_recebimento', 'valor_recuperavel']
        tem_colunas_recuperacao = all(col in st.session_state.df_final.columns for col in colunas_taxa)
        
        colunas_valor_justo = ['valor_justo']
        tem_colunas_valor_justo = all(col in st.session_state.df_final.columns for col in colunas_valor_justo)
        
        if tem_colunas_recuperacao and tem_colunas_valor_justo:
            if tem_calculos_novos:
                st.success("‚úÖ **Resultados completos aprimorados:** Taxa de recupera√ß√£o + Valor justo com DI-PRE + Metodologia melhorada")
            else:
                st.success("‚úÖ **Resultados completos:** Taxa de recupera√ß√£o + Valor justo com DI-PRE")
        elif tem_colunas_recuperacao:
            st.warning("‚ö†Ô∏è **Resultados parciais:** Apenas taxa de recupera√ß√£o (sem valor justo)")
        elif tem_colunas_valor_justo:
            st.warning("‚ö†Ô∏è **Resultados parciais:** Apenas valor justo (sem taxa de recupera√ß√£o)")
        else:
            st.warning("‚ö†Ô∏è **Resultados b√°sicos:** Sem taxa de recupera√ß√£o nem valor justo")
        
        # Mostrar detalhes dos novos c√°lculos se dispon√≠veis
        if tem_calculos_novos:
            with st.expander("üîç Detalhes dos C√°lculos Aprimorados", expanded=False):
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    taxa_media_aplicada = st.session_state.df_final['taxa_di_pre_aplicada'].mean()
                    st.metric(
                        "üìä Taxa DI-PRE M√©dia",
                        f"{taxa_media_aplicada:.2f}%",
                        help="Taxa DI-PRE m√©dia aplicada aos c√°lculos"
                    )
                
                with col2:
                    spread_medio = st.session_state.df_final['spread_risco_aplicado'].mean()
                    st.metric(
                        "‚ö° Spread M√©dio",
                        f"{spread_medio:.1f}%",
                        help="Spread de risco m√©dio aplicado"
                    )
                
                with col3:
                    taxa_total_media = st.session_state.df_final['taxa_total_aplicada'].mean()
                    st.metric(
                        "üéØ Taxa Total M√©dia",
                        f"{taxa_total_media:.2f}%",
                        help="Taxa total m√©dia (DI-PRE + spread)"
                    )
                
                with col4:
                    fator_medio = st.session_state.df_final['fator_correcao_ate_recebimento'].mean()
                    st.metric(
                        "üìà Fator M√©dio",
                        f"{fator_medio:.4f}",
                        help="Fator de capitaliza√ß√£o m√©dio aplicado"
                    )
                
                # Mostrar amostra dos c√°lculos detalhados
                st.subheader("üî¨ Amostra dos C√°lculos Detalhados")
                colunas_detalhe = [
                    'empresa', 'valor_corrigido', 'taxa_recuperacao', 
                    'taxa_di_pre_aplicada', 'spread_risco_aplicado', 'taxa_total_aplicada',
                    'fator_correcao_ate_recebimento', 'multa_final', 'valor_justo'
                ]
                
                # Filtrar apenas colunas que existem
                colunas_existentes = [col for col in colunas_detalhe if col in st.session_state.df_final.columns]
                
                # Mostrar amostra de 10 registros
                amostra_detalhe = st.session_state.df_final[colunas_existentes].head(10)
                st.dataframe(amostra_detalhe, use_container_width=True, hide_index=True)
        
        # Definir ordem de aging para organizar tabelas
        ordem_aging = [
            'Menor que 30 dias',
            'De 31 a 59 dias',
            'De 60 a 89 dias',
            'De 90 a 119 dias',
            'De 120 a 359 dias',
            'De 360 a 719 dias',
            'De 720 a 1080 dias',
            'Maior que 1080 dias',
            'A vencer'
        ]

        # Vis√£o Detalhada por Empresa, Tipo e Classifica√ß√£o
        st.subheader("üìä Agrupamento Detalhado - Por Empresa, Tipo, Classe, Status e Situa√ß√£o")
        
        # Definir colunas de agrega√ß√£o baseado no que est√° dispon√≠vel
        colunas_agg_1 = {
            'valor_principal': 'sum',
            'valor_liquido': 'sum', 
            'valor_corrigido': 'sum'
        }
        
        if tem_colunas_recuperacao:
            colunas_agg_1.update({
                'taxa_recuperacao': 'mean',
                'valor_recuperavel': 'sum'
            })
        
        if tem_colunas_valor_justo:
            colunas_agg_1.update({
                'valor_justo': 'sum'
            })
        
        # Adicionar colunas do novo c√°lculo se dispon√≠veis
        if tem_calculos_novos:
            colunas_agg_1.update({
                'taxa_di_pre_aplicada': 'mean',
                'spread_risco_aplicado': 'mean',
                'taxa_total_aplicada': 'mean',
                'fator_correcao_ate_recebimento': 'mean',
                'multa_final': 'mean'
            })
        
        # Verificar se as colunas existem no DataFrame antes de agrupar
        colunas_groupby = ['empresa', 'aging', 'aging_taxa']
        
        # Adicionar colunas opcionais se existirem
        colunas_opcionais = ['tipo', 'classe', 'status', 'situacao']
        for col in colunas_opcionais:
            if col in st.session_state.df_final.columns:
                colunas_groupby.insert(-2, col)  # Inserir antes de aging
        
        df_agg1 = (
            st.session_state.df_final
            .groupby(colunas_groupby, dropna=False)
            .agg(colunas_agg_1)
            .reset_index()
        )

        df_agg1['aging'] = pd.Categorical(df_agg1['aging'], categories=ordem_aging, ordered=True)
        df_agg1 = df_agg1.sort_values(['empresa'] + [col for col in colunas_opcionais if col in df_agg1.columns] + ['aging'])

        st.dataframe(df_agg1, use_container_width=True, hide_index=True)

        # Vis√£o Consolidada por Empresa e Aging
        st.subheader("üéØ Agrupamento Consolidado - Por Empresa e Aging")
        st.caption("Valores consolidados por empresa e faixa de aging, incluindo valor principal, l√≠quido, corrigido, recuper√°vel e valor justo")
        
        # Definir colunas de agrega√ß√£o baseado no que est√° dispon√≠vel
        colunas_agg_2 = {
            'valor_principal': 'sum',
            'valor_liquido': 'sum',
            'valor_corrigido': 'sum'
        }
        
        if tem_colunas_recuperacao:
            colunas_agg_2.update({
                'valor_recuperavel': 'sum',
                'taxa_recuperacao': 'mean'
            })
        
        if tem_colunas_valor_justo:
            colunas_agg_2['valor_justo'] = 'sum'
        
        # Adicionar m√©tricas do novo c√°lculo se dispon√≠veis
        if tem_calculos_novos:
            colunas_agg_2.update({
                'taxa_di_pre_aplicada': 'mean',
                'fator_correcao_ate_recebimento': 'mean'
            })
        
        df_agg2 = (
            st.session_state.df_final
            .groupby(['empresa', 'aging', 'aging_taxa'], dropna=False)
            .agg(colunas_agg_2)
            .reset_index()
        )

        df_agg2['aging'] = pd.Categorical(df_agg2['aging'], categories=ordem_aging, ordered=True)
        df_agg2 = df_agg2.sort_values(['empresa', 'aging'])

        st.dataframe(df_agg2, use_container_width=True, hide_index=True)

        # Vis√£o Geral por Aging
        st.subheader("üìà Agrupamento Geral - Por Aging e Taxa de Recupera√ß√£o")
        st.caption("Vis√£o consolidada geral agrupada apenas por faixa de aging, mostrando totais gerais incluindo valor justo")
        
        # Definir colunas de agrega√ß√£o baseado no que est√° dispon√≠vel
        colunas_agg_3 = {
            'valor_principal': 'sum',
            'valor_liquido': 'sum',
            'valor_corrigido': 'sum'
        }
        
        if tem_colunas_recuperacao:
            colunas_agg_3.update({
                'valor_recuperavel': 'sum',
                'taxa_recuperacao': 'mean'
            })
        
        if tem_colunas_valor_justo:
            colunas_agg_3['valor_justo'] = 'sum'
        
        # Adicionar estat√≠sticas do novo c√°lculo se dispon√≠veis
        if tem_calculos_novos:
            colunas_agg_3.update({
                'taxa_di_pre_aplicada': 'mean',
                'taxa_total_aplicada': 'mean',
                'fator_correcao_ate_recebimento': 'mean'
            })
        
        df_agg3 = (
            st.session_state.df_final
            .groupby(['aging', 'aging_taxa'], dropna=False)
            .agg(colunas_agg_3)
            .reset_index()
        )

        df_agg3['aging'] = pd.Categorical(df_agg3['aging'], categories=ordem_aging, ordered=True)
        df_agg3 = df_agg3.sort_values(['aging'])

        st.dataframe(df_agg3, use_container_width=True, hide_index=True)

        # Resumo Total Consolidado por Empresa
        st.markdown("---")
        st.subheader("üí∞ Resumo Total Consolidado por Empresa")
        
        # Calcular totais por empresa
        colunas_resumo_empresa = {
            'valor_principal': 'sum',
            'valor_liquido': 'sum',
            'valor_corrigido': 'sum'
        }
        
        if tem_colunas_recuperacao:
            colunas_resumo_empresa['valor_recuperavel'] = 'sum'
        
        if tem_colunas_valor_justo:
            colunas_resumo_empresa['valor_justo'] = 'sum'
        
        df_resumo_empresa = (
            st.session_state.df_final
            .groupby('empresa', dropna=False)
            .agg(colunas_resumo_empresa)
            .reset_index()
        )
        
        # Ordenar por empresa
        df_resumo_empresa = df_resumo_empresa.sort_values('empresa')
        
        # Formata√ß√£o dos valores para exibi√ß√£o
        df_resumo_display = df_resumo_empresa.copy()
        
        # Aplicar formata√ß√£o brasileira a todas as colunas de valor
        colunas_valor = ['valor_principal', 'valor_liquido', 'valor_corrigido']
        if tem_colunas_recuperacao:
            colunas_valor.append('valor_recuperavel')
        if tem_colunas_valor_justo:
            colunas_valor.append('valor_justo')
        
        for col in colunas_valor:
            if col in df_resumo_display.columns:
                df_resumo_display[col] = df_resumo_display[col].apply(
                    lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                )
        
        # Renomear colunas para exibi√ß√£o
        nomes_colunas = {
            'empresa': 'üè¢ Empresa',
            'valor_principal': 'üìä Valor Principal',
            'valor_liquido': 'üíß Valor L√≠quido',
            'valor_corrigido': '‚ö° Valor Corrigido'
        }
        
        if tem_colunas_recuperacao:
            nomes_colunas['valor_recuperavel'] = 'üéØ Valor Recuper√°vel'
        
        if tem_colunas_valor_justo:
            nomes_colunas['valor_justo'] = 'üíé Valor Justo'
        
        df_resumo_display = df_resumo_display.rename(columns=nomes_colunas)
        
        # Exibir tabela resumo por empresa
        st.dataframe(df_resumo_display, use_container_width=True, hide_index=True)
        
        # Calcular e exibir totais gerais
        st.markdown("---")
        st.subheader("üìä Totais Gerais")
        
        total_principal = df_resumo_empresa['valor_principal'].sum()
        total_liquido = df_resumo_empresa['valor_liquido'].sum()
        total_corrigido = df_resumo_empresa['valor_corrigido'].sum()
        
        # Calcular totais condicionais
        if tem_colunas_recuperacao:
            total_recuperavel = df_resumo_empresa['valor_recuperavel'].sum()
        else:
            total_recuperavel = 0
        
        if tem_colunas_valor_justo:
            total_valor_justo = df_resumo_empresa['valor_justo'].sum()
        else:
            total_valor_justo = 0
        
        # Criar colunas para as m√©tricas (adaptar quantidade baseado no que temos)
        if tem_colunas_valor_justo:
            col1, col2, col3, col4, col5 = st.columns(5)
        else:
            col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìä Valor Principal Total",
                f"R$ {total_principal:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                help="Soma total dos valores principais de todas as empresas"
            )
        
        with col2:
            st.metric(
                "üíß Valor L√≠quido Total",
                f"R$ {total_liquido:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                help="Soma total dos valores l√≠quidos de todas as empresas"
            )
        
        with col3:
            st.metric(
                "‚ö° Valor Corrigido Total",
                f"R$ {total_corrigido:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                help="Soma total dos valores corrigidos monetariamente"
            )
        
        with col4:
            if tem_colunas_recuperacao:
                st.metric(
                    "üéØ Valor Recuper√°vel Total",
                    f"R$ {total_recuperavel:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                    help="Soma total dos valores esperados de recupera√ß√£o"
                )
            else:
                st.metric(
                    "‚ö†Ô∏è Valor Recuper√°vel",
                    "N/D",
                    help="Taxa de recupera√ß√£o n√£o configurada"
                )
        
        # Quinta coluna s√≥ aparece se tivermos valor justo
        if tem_colunas_valor_justo:
            with col5:
                st.metric(
                    "üíé Valor Justo Total",
                    f"R$ {total_valor_justo:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                    help="Soma total dos valores justos (corrigido + IPCA + taxa recupera√ß√£o)"
                )
        
        # Exporta√ß√£o Manual dos Dados Brutos
        st.markdown("---")
        st.subheader("üíæ Exporta√ß√£o dos Dados Finais")
        
        st.info(f"""
        **üìã Dados prontos para exporta√ß√£o:**
        - **Total de registros:** {len(st.session_state.df_final):,}
        - **Total de colunas:** {len(st.session_state.df_final.columns)}
        - **Conte√∫do:** Todos os registros processados com aging, corre√ß√£o monet√°ria, taxa de recupera√ß√£o e valor justo com DI-PRE
        
        **üí° Op√ß√µes de exporta√ß√£o:**
        - **üìã Preview:** Gera apenas 10 linhas para testar o formato CSV brasileiro
        - **üíæ Completo:** Salva todos os dados na pasta 'data' do projeto
        """)
        
        # Criar duas colunas para os bot√µes
        col_export1, col_export2 = st.columns(2)

        colunas_ordem_usuario = [
            'nome_cliente', 'documento', 'contrato', 'classe', 'situacao', 
            'valor_principal', 'valor_nao_cedido', 'valor_terceiro', 'valor_cip', 
            'data_vencimento', 'empresa', 'tipo', 'status', 'id_padronizado', 
            'base_origem', 'data_base', 'data_vencimento_limpa', 'dias_atraso', 
            'aging', 'valor_principal_limpo', 'valor_nao_cedido_limpo', 
            'valor_terceiro_limpo', 'valor_cip_limpo', 'valor_liquido', 
            'multa', 'meses_atraso', 'juros_moratorios', 'indice_vencimento', 
            'indice_base', 'fator_correcao_ate_data_base', 'correcao_monetaria', 'valor_corrigido', 
            'aging_taxa', 'taxa_recuperacao', 'prazo_recebimento', 
            'di_pre_taxa_anual', 'taxa_di_pre_total_anual', 'taxa_desconto_mensal', 
            'data_recebimento_estimada', 'meses_ate_recebimento', 'ipca_mensal', 
            'fator_de_desconto', 'multa_atraso', 'multa_final', 'fator_correcao_ate_recebimento',
            'valor_recuperavel', 'valor_recuperavel_corrigido', 'valor_justo'
        ]
        
        # Bot√£o para exportar apenas 10 linhas (preview)
        with col_export1:
            if st.button("ÔøΩ Exportar Preview (10 primeiras linhas)", use_container_width=True):
                try:
                    with st.spinner("üìã Gerando preview CSV..."):
                        # Preparar preview dos dados
                        preview_df = st.session_state.df_final.head(10).copy()
                        
                        # Identificar colunas que existem na ordem especificada
                        colunas_existentes = [col for col in colunas_ordem_usuario if col in preview_df.columns]
                        colunas_restantes = [col for col in preview_df.columns if col not in colunas_ordem_usuario]
                        
                        # Reordenar DataFrame conforme especifica√ß√£o do usu√°rio
                        preview_df = preview_df[colunas_existentes + colunas_restantes]
                        
                        # Aplicar formata√ß√£o brasileira
                        preview_br = preview_df.copy()
                        
                        # Identificar colunas num√©ricas e format√°-las para o padr√£o brasileiro
                        colunas_numericas = preview_br.select_dtypes(include=[np.number]).columns
                        
                        for col in colunas_numericas:
                            if preview_br[col].dtype in ['float64', 'float32']:
                                # Converter n√∫meros float para string com v√≠rgula decimal (6 casas decimais)
                                preview_br[col] = preview_br[col].apply(
                                    lambda x: f"{x:.6f}".replace('.', ',') if pd.notna(x) else ''
                                )
                            elif preview_br[col].dtype in ['int64', 'int32']:
                                # Manter inteiros como est√£o (sem v√≠rgula)
                                preview_br[col] = preview_br[col].astype(str)
                        
                        # Converter para string CSV para mostrar na tela
                        from io import StringIO
                        csv_buffer = StringIO()
                        preview_br.to_csv(csv_buffer, index=False, sep=';')
                        csv_content = csv_buffer.getvalue()
                        
                        st.success("‚úÖ **Preview CSV gerado com sucesso!**")
                        
                        # Mostrar preview do CSV
                        st.subheader("üìã Preview do Arquivo CSV (10 primeiras linhas)")
                        st.code(csv_content, language="csv")
                        
                        # Op√ß√£o de download do preview
                        st.download_button(
                            label="‚¨áÔ∏è Download Preview CSV",
                            data=csv_content,
                            file_name=f"FIDC_Preview_10_linhas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar preview: {str(e)}")
        
        # Bot√£o para exportar dados completos
        with col_export2:
            if st.button("üíæ Salvar Dados Completos na Pasta 'data'", type="primary", use_container_width=True):
                try:
                    with st.spinner("üíæ Salvando dados finais..."):
                        # Criar diret√≥rio data se n√£o existir
                        data_dir = os.path.join(os.getcwd(), 'data')
                        os.makedirs(data_dir, exist_ok=True)
                        
                        # Nome do arquivo com timestamp
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        nome_arquivo_csv = f"FIDC_Dados_Finais_{timestamp}.csv"
                        
                        # Caminhos completos
                        caminho_csv = os.path.join(data_dir, nome_arquivo_csv)
                        
                        # =========== PREPARA√á√ÉO DOS DADOS PARA EXPORTA√á√ÉO CSV ===========
                        csv_export = st.session_state.df_final.copy(deep=True)
                        
                        # 1. PREPARAR DADOS PARA FORMATA√á√ÉO CSV (CONVERS√ïES DE TIPO)
                        st.info("üìä Preparando dados para exporta√ß√£o CSV...")
                        
                        # A. Converter todas as colunas de data para string formatada
                        colunas_data = ['data_vencimento_limpa', 'data_base', 'data_recebimento_estimada']
                        for col in colunas_data:
                            if col in csv_export.columns:
                                csv_export[col] = pd.to_datetime(csv_export[col], errors='coerce').dt.strftime('%Y-%m-%d')
                        
                        # B. Garantir que colunas num√©ricas n√£o tenham problemas de formato
                        colunas_numericas = [
                            'valor_principal', 'valor_liquido', 'valor_corrigido', 'valor_recuperavel', 'valor_justo',
                            'multa', 'juros_moratorios', 'correcao_monetaria',
                            'taxa_recuperacao', 'fator_correcao_ate_recebimento', 'ipca_mensal',
                            'di_pre_taxa_anual', 'taxa_desconto_mensal', 'meses_ate_recebimento'
                        ]
                        
                        for col in colunas_numericas:
                            if col in csv_export.columns:
                                csv_export[col] = pd.to_numeric(csv_export[col], errors='coerce').fillna(0)
                        
                        # C. Garantir que colunas de texto n√£o tenham problemas
                        colunas_texto = ['empresa', 'aging', 'aging_taxa', 'tipo', 'classe', 'status', 'situacao']
                        for col in colunas_texto:
                            if col in csv_export.columns:
                                csv_export[col] = csv_export[col].astype(str).fillna('')
                        
                        # D. Converter dados de aging para inteiros se poss√≠vel
                        if 'meses_ate_recebimento' in csv_export.columns:
                            csv_export['meses_ate_recebimento'] = csv_export['meses_ate_recebimento'].astype(int)
                        
                        # G. Remover colunas tempor√°rias/desnecess√°rias se existirem
                        colunas_remover = [
                            'vencimento_formatado', 'base_formatada', 'indice_vencimento_custom', 
                            'indice_base_custom', 'fator_correcao_ate_data_base', 'diferenca_12m'
                        ]
                        csv_export = csv_export.drop(columns=[col for col in colunas_remover if col in csv_export.columns])
                        
                        # H. Reordenar colunas para exporta√ß√£o na sequ√™ncia especificada pelo usu√°rio
                        
                        
                        # Identificar colunas que existem na ordem especificada
                        colunas_existentes = [col for col in colunas_ordem_usuario if col in csv_export.columns]
                        colunas_restantes = [col for col in csv_export.columns if col not in colunas_ordem_usuario]
                        
                        # Reordenar DataFrame conforme especifica√ß√£o do usu√°rio
                        csv_export = csv_export[colunas_existentes + colunas_restantes]
                        
                        # 2. SALVAR ARQUIVO CSV (FORMATO BRASILEIRO)
                        st.info("üíæ Salvando arquivo CSV no formato brasileiro...")
                        
                        # Preparar DataFrame para exporta√ß√£o brasileira
                        csv_export_br = csv_export.copy()
                        
                        # Identificar colunas num√©ricas e format√°-las para o padr√£o brasileiro
                        colunas_numericas = csv_export_br.select_dtypes(include=[np.number]).columns
                        
                        # Definir precis√£o espec√≠fica por tipo de coluna
                        colunas_monetarias = [
                            'valor_principal', 'valor_liquido', 'valor_corrigido', 'valor_recuperavel', 'valor_justo',
                            'multa', 'juros_moratorios', 'correcao_monetaria', 'valor_principal_limpo', 
                            'valor_nao_cedido_limpo', 'valor_terceiro_limpo', 'valor_cip_limpo',
                            'multa_atraso', 'multa_final', 'fator_de_desconto'
                        ]
                        
                        colunas_percentuais = [
                            'taxa_recuperacao', 'fator_correcao', 'ipca_mensal', 
                            'di_pre_taxa_anual', 'taxa_di_pre_total_anual', 'taxa_desconto_mensal'
                        ]
                        
                        colunas_indices = [
                            'indice_vencimento', 'indice_base'
                        ]
                        
                        for col in colunas_numericas:
                            if csv_export_br[col].dtype in ['float64', 'float32']:
                                # Todos os n√∫meros com 6 casas decimais conforme solicitado
                                csv_export_br[col] = csv_export_br[col].apply(
                                    lambda x: f"{x:.6f}".replace('.', ',') if pd.notna(x) else ''
                                )
                            elif csv_export_br[col].dtype in ['int64', 'int32']:
                                # Manter inteiros como est√£o (sem v√≠rgula)
                                csv_export_br[col] = csv_export_br[col].astype(str)
                        
                        # Salvar com separador brasileiro (ponto e v√≠rgula) e decimal brasileiro (v√≠rgula)
                        csv_export_br.to_csv(caminho_csv, index=False, encoding='utf-8-sig', sep=';')
                        
                        st.success(f"‚úÖ **Dados salvos com sucesso no formato brasileiro!**")
                        st.info(f"""
                        **üìÅ Arquivo salvo no formato brasileiro:**
                        - **Nome:** `{nome_arquivo_csv}`
                        - **Localiza√ß√£o:** `{data_dir}`
                        - **Registros:** {len(st.session_state.df_final):,}
                        - **Separador de campo:** `;` (ponto e v√≠rgula)
                        - **Separador decimal:** `,` (v√≠rgula - padr√£o brasileiro)
                        - **Encoding:** UTF-8 com BOM (compat√≠vel com Excel brasileiro)
                        
                        ‚úÖ **Formato otimizado para Excel brasileiro!**
                        """)
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao salvar dados: {str(e)}")
                    st.warning("‚ö†Ô∏è Verifique as permiss√µes de escrita na pasta do projeto.")
    
    # Status da corre√ß√£o - s√≥ exibir se o c√°lculo foi solicitado
    if calculo_foi_solicitado and tem_dados_calculados:
        st.success(f"‚úÖ **Processamento conclu√≠do:** {len(st.session_state.df_final):,} registros processados")
    
    # Informa√ß√µes sobre o processo
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informa√ß√µes sobre o Processo")
    
    with st.expander("‚öôÔ∏è Etapas do Processo de Corre√ß√£o", expanded=False):
        st.info("""
        **0. Carregamento de √çndices Econ√¥micos**
        - Importa√ß√£o dos √≠ndices IGP-M/IPCA do arquivo Excel
        - Estrutura: Coluna A (Data) e Coluna F (√çndice)
        - Hist√≥rico completo para c√°lculos de corre√ß√£o monet√°ria
        
        **1. C√°lculo de Aging**
        - Determina√ß√£o do tempo decorrido desde o vencimento
        - Classifica√ß√£o em faixas de aging padr√£o
        - Aplica√ß√£o de regras espec√≠ficas para cada faixa
        
        **2. Corre√ß√£o Monet√°ria com √çndices do Excel**
        - Busca do √≠ndice de vencimento (data do vencimento)
        - Busca do √≠ndice base (data atual/base)
        - C√°lculo do fator: √≠ndice_base / √≠ndice_vencimento
        - Aplica√ß√£o da corre√ß√£o: valor_liquido √ó (fator - 1)
        
        **3. Aplica√ß√£o de Taxa de Recupera√ß√£o**
        - Cruzamento por Empresa, Tipo e Aging
        - C√°lculo do valor recuper√°vel: valor_corrigido √ó taxa
        
        **4. C√°lculo do Valor Justo**
        - Desconto pelo prazo de recebimento
        - Aplica√ß√£o de taxa de desconto (DI-PRE + spread)
        - Resultado: valor presente l√≠quido esperado
        """)
    
    with st.expander("üí° F√≥rmulas Utilizadas", expanded=False):
        st.info("""
        **Corre√ß√£o Monet√°ria (Nova Metodologia):**
        `fator_correcao_ate_data_base = indice_base / indice_vencimento`
        `valor_corrigido = valor_liquido √ó fator_correcao_ate_data_base`
        
        **Busca de √çndices:**
        - `indice_vencimento`: √çndice para o m√™s/ano da data de vencimento
        - `indice_base`: √çndice para o m√™s/ano da data base (atual)
        - Fonte: Arquivo Excel carregado (colunas A e F)
        
        **Valor Recuper√°vel:**
        `valor_recuperavel = valor_corrigido √ó taxa_recuperacao`
        
        **Valor Justo com DI-PRE:**
        `valor_justo = valor_corrigido √ó taxa_recuperacao √ó (fator_exponencial_di_pre + multa)`
        
        **Fator Exponencial DI-PRE:**
        `fator_exponencial_di_pre = (1 + taxa_di_pre)^(prazo_recebimento/12)`
        
        **Onde:**
        - `fator_correcao`: Baseado no √≠ndice IGP-M
        - `taxa_multa`: Taxa de multa configurada
        - `juros_acumulados`: Juros morat√≥rios compostos
        - `taxa_recuperacao`: Taxa espec√≠fica por empresa/tipo/aging
        - `taxa_di_pre`: Taxa DI-PRE espec√≠fica para cada prazo (em meses)
        - `prazo_recebimento`: Prazo esperado em meses
        - `multa`: Multa adicional por atraso no recebimento
        
        **Processo de Matching DI-PRE:**
        - Para cada registro, busca no arquivo DI-PRE a taxa correspondente
        - Crit√©rio: `meses_futuros` == `prazo_recebimento`
        - Se n√£o encontrar correspond√™ncia, usa taxa padr√£o de 0.5% ao m√™s
        """)

if __name__ == "__main__":
    show()
