"""
P√°gina de Configura√ß√µes - FIDC Calculator
Configura√ß√£o de par√¢metros financeiros e √≠ndices de corre√ß√£o
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

def show():
    """P√°gina de Configura√ß√µes e Par√¢metros"""
    st.header("üìã CONFIGURA√á√ïES E PAR√ÇMETROS")
    
    # Verificar se os par√¢metros est√£o inicializados
    if 'params' not in st.session_state:
        from utils.parametros_correcao import ParametrosCorrecao
        st.session_state.params = ParametrosCorrecao()
    
    # Par√¢metros financeiros com destaque
    st.subheader("üí∞ Par√¢metros Financeiros")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric(
            label="Taxa de Multa",
            value=f"{st.session_state.params.taxa_multa:.1%}",
            help="Taxa de multa por inadimpl√™ncia aplicada sobre o valor l√≠quido"
        )
        
        taxa_multa = st.number_input(
            "Nova Taxa de Multa (%)",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.params.taxa_multa * 100,
            step=0.1,
            format="%.1f",
            key="input_multa"
        ) / 100
    
    with col2:
        st.metric(
            label="Taxa de Juros Morat√≥rios",
            value=f"{st.session_state.params.taxa_juros_mensal:.1%}",
            help="Taxa de juros morat√≥rios aplicada mensalmente"
        )
        
        taxa_juros = st.number_input(
            "Nova Taxa de Juros (%)",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.params.taxa_juros_mensal * 100,
            step=0.1,
            format="%.1f",
            key="input_juros"
        ) / 100
    
    # Bot√£o para atualizar par√¢metros
    if st.button("üíæ Atualizar Par√¢metros", type="primary"):
        st.session_state.params.taxa_multa = taxa_multa
        st.session_state.params.taxa_juros_mensal = taxa_juros
        st.success("‚úÖ Par√¢metros atualizados com sucesso!")
        st.rerun()
    
    st.markdown("---")
    
    # Gr√°ficos dos √≠ndices de corre√ß√£o
    st.subheader("üìä Evolu√ß√£o do √çndice de Corre√ß√£o Monet√°ria")
    
    try:
        # Obter dados dos √≠ndices para visualiza√ß√£o
        dados_igpm = st.session_state.params.indices_igpm
        df_igpm = pd.DataFrame(list(dados_igpm.items()), columns=['Periodo', 'Valor'])
        df_igpm['Data'] = pd.to_datetime(df_igpm['Periodo'], format='%Y.%m', errors='coerce')
        df_igpm = df_igpm.dropna(subset=['Data'])
        df_igpm['Indice'] = 'IGP-M'
        df_igpm = df_igpm.sort_values('Data')
        
        dados_ipca = st.session_state.params.indices_ipca
        df_ipca = pd.DataFrame(list(dados_ipca.items()), columns=['Periodo', 'Valor'])
        df_ipca['Data'] = pd.to_datetime(df_ipca['Periodo'], format='%Y.%m', errors='coerce')
        df_ipca = df_ipca.dropna(subset=['Data'])
        df_ipca['Indice'] = 'IPCA'
        df_ipca = df_ipca.sort_values('Data')
        
        # Combinar todos os dados
        df_completo = pd.concat([
            df_igpm[['Periodo', 'Valor', 'Indice']],
            df_ipca[['Periodo', 'Valor', 'Indice']]
        ], ignore_index=True)
        
        # Ordenar por per√≠odo
        df_completo['Data_ord'] = pd.to_datetime(df_completo['Periodo'], format='%Y.%m', errors='coerce')
        df_completo = df_completo.dropna(subset=['Data_ord'])
        df_completo = df_completo.sort_values('Data_ord')
        
        # Preparar tabela de exibi√ß√£o com valores formatados
        df_tabela = df_completo[['Periodo', 'Valor', 'Indice']].copy()
        df_tabela['Valor'] = df_tabela['Valor'].round(2).astype(int)  # Converter para inteiro
        df_tabela.columns = ['Per√≠odo', '√çndice', 'Tipo']

        # Converter Per√≠odo para datetime se necess√°rio
        df_tabela['Per√≠odo'] = pd.to_datetime(df_tabela['Per√≠odo'].str.replace('.', '-'), format='%Y-%m')

        # Gr√°fico
        fig = px.line(
            df_tabela,
            x='Per√≠odo',
            y='√çndice',
            color='Tipo',
            markers=True,
            title='Evolu√ß√£o dos √çndices por Per√≠odo'
        )

        fig.update_layout(xaxis_title='Per√≠odo', yaxis_title='√çndice (%)')

        # Streamlit
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela consolidada com todos os valores
        st.subheader("üìã Tabela dos √çndices de Corre√ß√£o")
        
        # Exibir informa√ß√£o sobre todos os registros
        st.write(f"**Total de {len(df_tabela)} registros dispon√≠veis** (agosto/1994 at√© {df_completo['Periodo'].iloc[-1]})")
        
        st.dataframe(
            df_tabela, 
            use_container_width=True, 
            hide_index=True,
            height=min(800, len(df_tabela) * 35 + 100)
        )
    
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erro ao carregar dados dos √≠ndices para tabela: {e}")
        
        # Informa√ß√£o b√°sica caso a tabela n√£o carregue
        st.info("**Tabela de √≠ndices temporariamente indispon√≠vel**\n\nOs √≠ndices ser√£o utilizados normalmente durante os c√°lculos.")
    
    # Informa√ß√µes adicionais sobre os par√¢metros
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informa√ß√µes dos Par√¢metros")
    
    with st.expander("üìñ Sobre os √çndices de Corre√ß√£o", expanded=False):
        st.info("""
        **IGP-M (√çndice Geral de Pre√ßos - Mercado)**
        - √çndice de corre√ß√£o monet√°ria oficial
        - Utilizado para contratos e atualiza√ß√µes financeiras
        - Calculado pela Funda√ß√£o Get√∫lio Vargas (FGV)
        
        **IPCA (√çndice Nacional de Pre√ßos ao Consumidor Amplo)**
        - √çndice oficial de infla√ß√£o do Brasil
        - Utilizado pelo Banco Central para metas de infla√ß√£o
        - Calculado pelo IBGE
        
        **Observa√ß√£o:** Os dados s√£o carregados automaticamente e atualizados mensalmente.
        """)
    
    with st.expander("üí∞ Sobre as Taxas Financeiras", expanded=False):
        st.info("""
        **Taxa de Multa**
        - Aplicada sobre o valor l√≠quido em caso de inadimpl√™ncia
        - Valor padr√£o: 2% (configur√°vel)
        - Base legal: C√≥digo Civil Brasileiro
        
        **Taxa de Juros Morat√≥rios**
        - Aplicada mensalmente sobre d√©bitos em atraso
        - Valor padr√£o: 1% ao m√™s (configur√°vel)
        - Utilizada para c√°lculo de juros compostos
        
        **Observa√ß√£o:** As taxas podem ser ajustadas conforme necessidades espec√≠ficas do c√°lculo.
        """)

if __name__ == "__main__":
    show()
